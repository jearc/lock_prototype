!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALIGNED	include/utils.h	69;"	d
ALIGNMENT	bmarks/atomic_bench.c	53;"	d	file:
ALIGNMENT	bmarks/htlock_test.c	25;"	d	file:
ALTERNATE_SOCKETS	include/platform_defs.h	86;"	d
CACHE_LINE_SIZE	include/platform_defs.h	136;"	d
CACHE_LINE_SIZE	include/platform_defs.h	149;"	d
CACHE_LINE_SIZE	include/platform_defs.h	163;"	d
CACHE_LINE_SIZE	include/platform_defs.h	53;"	d
CACHE_LINE_SIZE	include/platform_defs.h	68;"	d
CACHE_LINE_SIZE	include/platform_defs.h	83;"	d
CAS_PTR	include/atomic_ops.h	165;"	d
CAS_PTR	include/atomic_ops.h	256;"	d
CAS_PTR	include/atomic_ops.h	300;"	d
CAS_PTR	include/atomic_ops.h	416;"	d
CAS_U16	include/atomic_ops.h	167;"	d
CAS_U16	include/atomic_ops.h	258;"	d
CAS_U16	include/atomic_ops.h	302;"	d
CAS_U16	include/atomic_ops.h	418;"	d
CAS_U32	include/atomic_ops.h	168;"	d
CAS_U32	include/atomic_ops.h	259;"	d
CAS_U32	include/atomic_ops.h	303;"	d
CAS_U32	include/atomic_ops.h	419;"	d
CAS_U64	include/atomic_ops.h	169;"	d
CAS_U64	include/atomic_ops.h	260;"	d
CAS_U64	include/atomic_ops.h	304;"	d
CAS_U64	include/atomic_ops.h	420;"	d
CAS_U8	include/atomic_ops.h	166;"	d
CAS_U8	include/atomic_ops.h	257;"	d
CAS_U8	include/atomic_ops.h	301;"	d
CAS_U8	include/atomic_ops.h	417;"	d
COMPILER_BARRIER	include/atomic_ops.h	38;"	d
COMPILE_FLAGS	Makefile	/^  COMPILE_FLAGS=-O0 -DADD_PADDING -fno-inline$/;"	m
COMPILE_FLAGS	Makefile	/^  COMPILE_FLAGS=-O3 -DADD_PADDING$/;"	m
CORES_PER_SOCKET	include/platform_defs.h	135;"	d
CORES_PER_SOCKET	include/platform_defs.h	148;"	d
CORES_PER_SOCKET	include/platform_defs.h	162;"	d
CORES_PER_SOCKET	include/platform_defs.h	52;"	d
CORES_PER_SOCKET	include/platform_defs.h	67;"	d
CORES_PER_SOCKET	include/platform_defs.h	82;"	d
CORE_NUM	Makefile	/^CORE_NUM := $(shell nproc)$/;"	m
DAF_U16	include/atomic_ops.h	193;"	d
DAF_U16	include/atomic_ops.h	284;"	d
DAF_U16	include/atomic_ops.h	328;"	d
DAF_U16	include/atomic_ops.h	444;"	d
DAF_U32	include/atomic_ops.h	194;"	d
DAF_U32	include/atomic_ops.h	285;"	d
DAF_U32	include/atomic_ops.h	329;"	d
DAF_U32	include/atomic_ops.h	445;"	d
DAF_U64	include/atomic_ops.h	195;"	d
DAF_U64	include/atomic_ops.h	286;"	d
DAF_U64	include/atomic_ops.h	330;"	d
DAF_U64	include/atomic_ops.h	446;"	d
DAF_U8	include/atomic_ops.h	192;"	d
DAF_U8	include/atomic_ops.h	283;"	d
DAF_U8	include/atomic_ops.h	327;"	d
DAF_U8	include/atomic_ops.h	443;"	d
DDPRINT	include/utils.h	109;"	d
DDPRINT	include/utils.h	112;"	d
DEBUG_FLAGS	Makefile	/^  DEBUG_FLAGS=-Wall -ggdb -DDEBUG$/;"	m
DEBUG_FLAGS	Makefile	/^  DEBUG_FLAGS=-Wall$/;"	m
DEFAULT_ACQ_DELAY	bmarks/individual_ops.c	28;"	d	file:
DEFAULT_ACQ_DELAY	bmarks/measure_contention.c	42;"	d	file:
DEFAULT_ACQ_DELAY	bmarks/stress_latency.c	31;"	d	file:
DEFAULT_ACQ_DELAY	bmarks/stress_one.c	35;"	d	file:
DEFAULT_ACQ_DELAY	bmarks/stress_test.c	33;"	d	file:
DEFAULT_ACQ_DELAY	bmarks/uncontended.c	31;"	d	file:
DEFAULT_ACQ_DURATION	bmarks/individual_ops.c	30;"	d	file:
DEFAULT_ACQ_DURATION	bmarks/measure_contention.c	44;"	d	file:
DEFAULT_ACQ_DURATION	bmarks/stress_latency.c	33;"	d	file:
DEFAULT_ACQ_DURATION	bmarks/stress_one.c	37;"	d	file:
DEFAULT_ACQ_DURATION	bmarks/stress_test.c	35;"	d	file:
DEFAULT_ACQ_DURATION	bmarks/uncontended.c	33;"	d	file:
DEFAULT_BALANCE_PERC	bmarks/bank_simple.c	35;"	d	file:
DEFAULT_BENCHMARK	bmarks/atomic_bench.c	65;"	d	file:
DEFAULT_CL_ACCESS	bmarks/measure_contention.c	46;"	d	file:
DEFAULT_CL_ACCESS	bmarks/stress_latency.c	35;"	d	file:
DEFAULT_CL_ACCESS	bmarks/stress_one.c	39;"	d	file:
DEFAULT_CL_ACCESS	bmarks/stress_test.c	37;"	d	file:
DEFAULT_CORE_TRY_LOCK	bmarks/htlock_test.c	32;"	d	file:
DEFAULT_DEPOSIT_PERC	bmarks/bank_simple.c	37;"	d	file:
DEFAULT_DISJOINT	bmarks/bank_one.c	41;"	d	file:
DEFAULT_DISJOINT	bmarks/bank_simple.c	41;"	d	file:
DEFAULT_DISJOINT	bmarks/bank_th.c	42;"	d	file:
DEFAULT_DO_WRITES	bmarks/measure_contention.c	50;"	d	file:
DEFAULT_DO_WRITES	bmarks/stress_latency.c	39;"	d	file:
DEFAULT_DO_WRITES	bmarks/stress_one.c	43;"	d	file:
DEFAULT_DO_WRITES	bmarks/stress_test.c	41;"	d	file:
DEFAULT_DURATION	bmarks/atomic_bench.c	63;"	d	file:
DEFAULT_DURATION	bmarks/bank_one.c	32;"	d	file:
DEFAULT_DURATION	bmarks/bank_simple.c	32;"	d	file:
DEFAULT_DURATION	bmarks/bank_th.c	33;"	d	file:
DEFAULT_DURATION	bmarks/htlock_test.c	30;"	d	file:
DEFAULT_DURATION	bmarks/individual_ops.c	32;"	d	file:
DEFAULT_DURATION	bmarks/measure_contention.c	48;"	d	file:
DEFAULT_DURATION	bmarks/stress_latency.c	37;"	d	file:
DEFAULT_DURATION	bmarks/stress_one.c	41;"	d	file:
DEFAULT_DURATION	bmarks/stress_test.c	39;"	d	file:
DEFAULT_DURATION	bmarks/test_array_alloc.c	61;"	d	file:
DEFAULT_DURATION	bmarks/test_correctness.c	60;"	d	file:
DEFAULT_DURATION	bmarks/test_trylock.c	60;"	d	file:
DEFAULT_DURATION	bmarks/uncontended.c	35;"	d	file:
DEFAULT_HOME_CORE	bmarks/uncontended.c	37;"	d	file:
DEFAULT_NB_ACCOUNTS	bmarks/bank_one.c	33;"	d	file:
DEFAULT_NB_ACCOUNTS	bmarks/bank_simple.c	33;"	d	file:
DEFAULT_NB_ACCOUNTS	bmarks/bank_th.c	34;"	d	file:
DEFAULT_NB_THREADS	bmarks/bank_one.c	34;"	d	file:
DEFAULT_NB_THREADS	bmarks/bank_th.c	35;"	d	file:
DEFAULT_NUM_ACQ	bmarks/individual_ops.c	26;"	d	file:
DEFAULT_NUM_ACQ	bmarks/measure_contention.c	40;"	d	file:
DEFAULT_NUM_ACQ	bmarks/stress_latency.c	29;"	d	file:
DEFAULT_NUM_ACQ	bmarks/stress_one.c	33;"	d	file:
DEFAULT_NUM_ACQ	bmarks/stress_test.c	31;"	d	file:
DEFAULT_NUM_ACQ	bmarks/uncontended.c	29;"	d	file:
DEFAULT_NUM_ENTRIES	bmarks/atomic_bench.c	61;"	d	file:
DEFAULT_NUM_ENTRIES	bmarks/htlock_test.c	28;"	d	file:
DEFAULT_NUM_LOCKS	bmarks/individual_ops.c	24;"	d	file:
DEFAULT_NUM_LOCKS	bmarks/measure_contention.c	38;"	d	file:
DEFAULT_NUM_LOCKS	bmarks/stress_latency.c	27;"	d	file:
DEFAULT_NUM_LOCKS	bmarks/stress_one.c	31;"	d	file:
DEFAULT_NUM_LOCKS	bmarks/stress_test.c	29;"	d	file:
DEFAULT_NUM_LOCKS	bmarks/test_array_alloc.c	63;"	d	file:
DEFAULT_NUM_LOCKS	bmarks/uncontended.c	27;"	d	file:
DEFAULT_NUM_THREADS	bmarks/atomic_bench.c	62;"	d	file:
DEFAULT_NUM_THREADS	bmarks/bank_simple.c	34;"	d	file:
DEFAULT_NUM_THREADS	bmarks/htlock_test.c	29;"	d	file:
DEFAULT_NUM_THREADS	bmarks/individual_ops.c	22;"	d	file:
DEFAULT_NUM_THREADS	bmarks/measure_contention.c	36;"	d	file:
DEFAULT_NUM_THREADS	bmarks/stress_latency.c	25;"	d	file:
DEFAULT_NUM_THREADS	bmarks/stress_one.c	29;"	d	file:
DEFAULT_NUM_THREADS	bmarks/stress_test.c	27;"	d	file:
DEFAULT_NUM_THREADS	bmarks/test_array_alloc.c	59;"	d	file:
DEFAULT_NUM_THREADS	bmarks/test_correctness.c	58;"	d	file:
DEFAULT_NUM_THREADS	bmarks/test_trylock.c	58;"	d	file:
DEFAULT_NUM_THREADS	bmarks/uncontended.c	25;"	d	file:
DEFAULT_PAUSE	bmarks/atomic_bench.c	64;"	d	file:
DEFAULT_READ_ALL	bmarks/bank_one.c	35;"	d	file:
DEFAULT_READ_ALL	bmarks/bank_th.c	36;"	d	file:
DEFAULT_READ_THREADS	bmarks/bank_one.c	39;"	d	file:
DEFAULT_READ_THREADS	bmarks/bank_th.c	40;"	d	file:
DEFAULT_REMOTE_CORE	bmarks/uncontended.c	39;"	d	file:
DEFAULT_SEED	bmarks/bank_one.c	36;"	d	file:
DEFAULT_SEED	bmarks/bank_simple.c	38;"	d	file:
DEFAULT_SEED	bmarks/bank_th.c	37;"	d	file:
DEFAULT_SEED	bmarks/htlock_test.c	31;"	d	file:
DEFAULT_SEED	bmarks/measure_contention.c	52;"	d	file:
DEFAULT_USE_LOCKS	bmarks/bank_one.c	37;"	d	file:
DEFAULT_USE_LOCKS	bmarks/bank_simple.c	39;"	d	file:
DEFAULT_USE_LOCKS	bmarks/bank_th.c	38;"	d	file:
DEFAULT_WITHDRAW_PERC	bmarks/bank_simple.c	36;"	d	file:
DEFAULT_WRITE_ALL	bmarks/bank_one.c	38;"	d	file:
DEFAULT_WRITE_ALL	bmarks/bank_th.c	39;"	d	file:
DEFAULT_WRITE_THREADS	bmarks/bank_one.c	40;"	d	file:
DEFAULT_WRITE_THREADS	bmarks/bank_simple.c	40;"	d	file:
DEFAULT_WRITE_THREADS	bmarks/bank_th.c	41;"	d	file:
DETAILED_LATENCIES	bmarks/stress_latency.c	19;"	d	file:
DPRINT	include/utils.h	108;"	d
DPRINT	include/utils.h	111;"	d
FAD_U16	include/atomic_ops.h	183;"	d
FAD_U16	include/atomic_ops.h	274;"	d
FAD_U16	include/atomic_ops.h	318;"	d
FAD_U16	include/atomic_ops.h	434;"	d
FAD_U32	include/atomic_ops.h	184;"	d
FAD_U32	include/atomic_ops.h	275;"	d
FAD_U32	include/atomic_ops.h	319;"	d
FAD_U32	include/atomic_ops.h	435;"	d
FAD_U64	include/atomic_ops.h	185;"	d
FAD_U64	include/atomic_ops.h	276;"	d
FAD_U64	include/atomic_ops.h	320;"	d
FAD_U64	include/atomic_ops.h	436;"	d
FAD_U8	include/atomic_ops.h	182;"	d
FAD_U8	include/atomic_ops.h	273;"	d
FAD_U8	include/atomic_ops.h	317;"	d
FAD_U8	include/atomic_ops.h	433;"	d
FAI_U16	include/atomic_ops.h	178;"	d
FAI_U16	include/atomic_ops.h	269;"	d
FAI_U16	include/atomic_ops.h	313;"	d
FAI_U16	include/atomic_ops.h	429;"	d
FAI_U32	include/atomic_ops.h	179;"	d
FAI_U32	include/atomic_ops.h	270;"	d
FAI_U32	include/atomic_ops.h	314;"	d
FAI_U32	include/atomic_ops.h	430;"	d
FAI_U64	include/atomic_ops.h	180;"	d
FAI_U64	include/atomic_ops.h	271;"	d
FAI_U64	include/atomic_ops.h	315;"	d
FAI_U64	include/atomic_ops.h	431;"	d
FAI_U8	include/atomic_ops.h	177;"	d
FAI_U8	include/atomic_ops.h	268;"	d
FAI_U8	include/atomic_ops.h	312;"	d
FAI_U8	include/atomic_ops.h	428;"	d
GCC	Makefile	/^	GCC:=\/opt\/csw\/bin\/gcc$/;"	m
GCC	Makefile	/^	GCC:=gcc$/;"	m
GCC	Makefile	/^	GCC:=tile-gcc$/;"	m
GETTICKS_CALC_REPS	include/utils.h	215;"	d
IAF_U16	include/atomic_ops.h	188;"	d
IAF_U16	include/atomic_ops.h	279;"	d
IAF_U16	include/atomic_ops.h	323;"	d
IAF_U16	include/atomic_ops.h	439;"	d
IAF_U32	include/atomic_ops.h	189;"	d
IAF_U32	include/atomic_ops.h	280;"	d
IAF_U32	include/atomic_ops.h	324;"	d
IAF_U32	include/atomic_ops.h	440;"	d
IAF_U64	include/atomic_ops.h	190;"	d
IAF_U64	include/atomic_ops.h	281;"	d
IAF_U64	include/atomic_ops.h	325;"	d
IAF_U64	include/atomic_ops.h	441;"	d
IAF_U8	include/atomic_ops.h	187;"	d
IAF_U8	include/atomic_ops.h	278;"	d
IAF_U8	include/atomic_ops.h	322;"	d
IAF_U8	include/atomic_ops.h	438;"	d
INCLUDES	Makefile	/^INCLUDES := -I$(MAININCLUDE)$/;"	m
INIT_VAL	src/hclh.c	139;"	d	file:
IO_FLUSH	bmarks/bank_one.c	20;"	d	file:
IO_FLUSH	bmarks/bank_simple.c	20;"	d	file:
IO_FLUSH	bmarks/bank_th.c	21;"	d	file:
LIBS	Makefile	/^	LIBS := -lrt -lpthread # -lnuma (removed for ARM)$/;"	m
LIBS	Makefile	/^	LIBS := -lrt -lpthread$/;"	m
LIBS	Makefile	/^	LIBS:=-lrt -lpthread -ltmc$/;"	m
LOCKED	src/spinlock.c	34;"	d	file:
LOCKED	src/ttas.c	34;"	d	file:
LOCK_VERSION	Makefile	/^  LOCK_VERSION=-DUSE_MCS_LOCKS        #$/;"	m
MAININCLUDE	Makefile	/^MAININCLUDE := $(TOP)\/include$/;"	m
MAX_DELAY	include/rw_ttas.h	47;"	d
MAX_DELAY	include/ttas.h	50;"	d
MAX_NUM_PROCESSES	include/alock.h	54;"	d
MAX_NUM_PROCESSES	include/alock.h	56;"	d
MAX_NUM_PROCESSES	include/alock.h	58;"	d
MAX_NUM_PROCESSES	include/alock.h	60;"	d
MAX_RW	include/rw_ttas.h	50;"	d
MAX_RW	include/rw_ttas.h	55;"	d
MEM_BARRIER	include/atomic_ops.h	199;"	d
MEM_BARRIER	include/atomic_ops.h	290;"	d
MEM_BARRIER	include/atomic_ops.h	334;"	d
MEM_BARRIER	include/atomic_ops.h	450;"	d
MIN_DELAY	include/ttas.h	49;"	d
NB_TICKETS_LOCAL	include/htlock.h	57;"	d
NOOP_CALC_REPS	include/utils.h	229;"	d
NOP_DURATION	include/platform_defs.h	137;"	d
NOP_DURATION	include/platform_defs.h	150;"	d
NOP_DURATION	include/platform_defs.h	164;"	d
NOP_DURATION	include/platform_defs.h	54;"	d
NOP_DURATION	include/platform_defs.h	69;"	d
NOP_DURATION	include/platform_defs.h	84;"	d
NUMBER_OF_SOCKETS	include/platform_defs.h	134;"	d
NUMBER_OF_SOCKETS	include/platform_defs.h	147;"	d
NUMBER_OF_SOCKETS	include/platform_defs.h	161;"	d
NUMBER_OF_SOCKETS	include/platform_defs.h	51;"	d
NUMBER_OF_SOCKETS	include/platform_defs.h	66;"	d
NUMBER_OF_SOCKETS	include/platform_defs.h	81;"	d
NUM_THREADS	samples/sample_generic.c	33;"	d	file:
NUM_THREADS	samples/sample_mcs.c	33;"	d	file:
OBJ_FILES	Makefile	/^OBJ_FILES :=  mcs.o clh.o ttas.o spinlock.o rw_ttas.o ticket.o alock.o hclh.o gl_lock.o htlock.o$/;"	m
OPTIMIZE	Makefile	/^OPTIMIZE=$/;"	m
OPTIMIZE	Makefile	/^OPTIMIZE=-DOPTERON_OPTIMIZE$/;"	m
PAUSE	include/utils.h	72;"	d
PAUSE	include/utils.h	75;"	d
PAUSE	include/utils.h	77;"	d
PAUSE	include/utils.h	79;"	d
PLATFORM	Makefile	/^PLATFORM=-DARM -DCORE_NUM=4$/;"	m
PLATFORM_NUMA	Makefile	/^PLATFORM_NUMA=1$/;"	m
PREFETCHW	include/platform_defs.h	190;"	d
PREFETCHW	include/platform_defs.h	192;"	d
PREFETCHW	include/platform_defs.h	194;"	d
PREFETCHW	include/platform_defs.h	196;"	d
PRIMITIVE	Makefile	/^ PRIMITIVE=-DTEST_FAI$/;"	m
PRINT_OUTPUT	bmarks/measure_contention.c	33;"	d	file:
RO	bmarks/bank_one.c	29;"	d	file:
RO	bmarks/bank_simple.c	29;"	d	file:
RO	bmarks/bank_th.c	30;"	d	file:
RW	bmarks/bank_one.c	30;"	d	file:
RW	bmarks/bank_simple.c	30;"	d	file:
RW	bmarks/bank_th.c	31;"	d	file:
SRCPATH	Makefile	/^SRCPATH := $(TOP)\/src$/;"	m
STR	bmarks/bank_one.c	44;"	d	file:
STR	bmarks/bank_simple.c	44;"	d	file:
STR	bmarks/bank_th.c	45;"	d	file:
STR	bmarks/measure_contention.c	30;"	d	file:
STR	bmarks/stress_latency.c	21;"	d	file:
STR	bmarks/stress_one.c	23;"	d	file:
STR	bmarks/stress_test.c	21;"	d	file:
STR	bmarks/uncontended.c	19;"	d	file:
SWAP_PTR	include/atomic_ops.h	171;"	d
SWAP_PTR	include/atomic_ops.h	262;"	d
SWAP_PTR	include/atomic_ops.h	306;"	d
SWAP_PTR	include/atomic_ops.h	422;"	d
SWAP_U16	include/atomic_ops.h	173;"	d
SWAP_U16	include/atomic_ops.h	264;"	d
SWAP_U16	include/atomic_ops.h	308;"	d
SWAP_U16	include/atomic_ops.h	424;"	d
SWAP_U32	include/atomic_ops.h	174;"	d
SWAP_U32	include/atomic_ops.h	265;"	d
SWAP_U32	include/atomic_ops.h	309;"	d
SWAP_U32	include/atomic_ops.h	425;"	d
SWAP_U64	include/atomic_ops.h	175;"	d
SWAP_U64	include/atomic_ops.h	266;"	d
SWAP_U64	include/atomic_ops.h	310;"	d
SWAP_U64	include/atomic_ops.h	426;"	d
SWAP_U8	include/atomic_ops.h	172;"	d
SWAP_U8	include/atomic_ops.h	263;"	d
SWAP_U8	include/atomic_ops.h	307;"	d
SWAP_U8	include/atomic_ops.h	423;"	d
TAS_U8	include/atomic_ops.h	197;"	d
TAS_U8	include/atomic_ops.h	288;"	d
TAS_U8	include/atomic_ops.h	332;"	d
TAS_U8	include/atomic_ops.h	448;"	d
TICKET_BASE_WAIT	include/ticket.h	52;"	d
TICKET_BASE_WAIT	src/htlock.c	229;"	d	file:
TICKET_MAX_WAIT	include/ticket.h	53;"	d
TICKET_MAX_WAIT	src/htlock.c	230;"	d	file:
TICKET_ON_TW0_CLS	include/ticket.h	56;"	d
TICKET_WAIT_NEXT	include/ticket.h	54;"	d
TICKET_WAIT_NEXT	src/htlock.c	231;"	d	file:
TOP	Makefile	/^TOP := $(patsubst %\/,%,$(dir $(lastword $(MAKEFILE_LIST))))$/;"	m
UNAME	Makefile	/^UNAME := $(shell uname)$/;"	m
UNLOCKED	src/spinlock.c	33;"	d	file:
UNLOCKED	src/ttas.c	33;"	d	file:
W_MASK	include/rw_ttas.h	51;"	d
W_MASK	include/rw_ttas.h	56;"	d
XSTR	bmarks/atomic_bench.c	52;"	d	file:
XSTR	bmarks/bank_one.c	43;"	d	file:
XSTR	bmarks/bank_simple.c	43;"	d	file:
XSTR	bmarks/bank_th.c	44;"	d	file:
XSTR	bmarks/htlock_test.c	24;"	d	file:
XSTR	bmarks/individual_ops.c	19;"	d	file:
XSTR	bmarks/measure_contention.c	31;"	d	file:
XSTR	bmarks/stress_latency.c	22;"	d	file:
XSTR	bmarks/stress_one.c	24;"	d	file:
XSTR	bmarks/stress_test.c	22;"	d	file:
XSTR	bmarks/test_array_alloc.c	56;"	d	file:
XSTR	bmarks/test_correctness.c	55;"	d	file:
XSTR	bmarks/test_trylock.c	55;"	d	file:
XSTR	bmarks/uncontended.c	20;"	d	file:
_ALOCK_H_	include/alock.h	33;"	d
_ATOMIC_OPS_H_INCLUDED_	include/atomic_ops.h	34;"	d
_CLH_H_	include/clh.h	31;"	d
_GLLOCK_H_	include/gl_lock.h	35;"	d
_HCLH_H_	include/hclh.h	31;"	d
_HTICKET_H_	include/htlock.h	38;"	d
_MCS_H_	include/mcs.h	34;"	d
_PLATFORM_DEFS_H_INCLUDED_	include/platform_defs.h	34;"	d
_RWTTAS_H_	include/rw_ttas.h	31;"	d
_SPINLOCK_H_	include/spinlock.h	34;"	d
_TICKET_H_	include/ticket.h	35;"	d
_TTAS_H_	include/ttas.h	32;"	d
_UTILS_H_INCLUDED_	include/utils.h	33;"	d
account	bmarks/bank_one.c	/^typedef struct account {$/;"	s	file:
account	bmarks/bank_simple.c	/^typedef struct account $/;"	s	file:
account	bmarks/bank_th.c	/^typedef struct account {$/;"	s	file:
account_t	bmarks/bank_one.c	/^} account_t;$/;"	t	typeref:struct:account	file:
account_t	bmarks/bank_simple.c	/^} account_t;$/;"	t	typeref:struct:account	file:
account_t	bmarks/bank_th.c	/^} account_t;$/;"	t	typeref:struct:account	file:
accounts	bmarks/bank_one.c	/^    __attribute__((aligned(CACHE_LINE_SIZE))) volatile account_t *accounts;$/;"	m	struct:bank	file:
accounts	bmarks/bank_simple.c	/^  account_t *accounts;$/;"	m	struct:bank	file:
accounts	bmarks/bank_th.c	/^    __attribute__((aligned(CACHE_LINE_SIZE))) volatile account_t *accounts;$/;"	m	struct:bank	file:
acq_delay	bmarks/individual_ops.c	/^int acq_delay;$/;"	v
acq_delay	bmarks/measure_contention.c	/^int acq_delay;$/;"	v
acq_delay	bmarks/stress_latency.c	/^int acq_delay;$/;"	v
acq_delay	bmarks/stress_one.c	/^int acq_delay;$/;"	v
acq_delay	bmarks/stress_test.c	/^int acq_delay;$/;"	v
acq_delay	bmarks/uncontended.c	/^int acq_delay;$/;"	v
acq_duration	bmarks/individual_ops.c	/^int acq_duration;$/;"	v
acq_duration	bmarks/measure_contention.c	/^int acq_duration;$/;"	v
acq_duration	bmarks/stress_latency.c	/^int acq_duration;$/;"	v
acq_duration	bmarks/stress_one.c	/^int acq_duration;$/;"	v
acq_duration	bmarks/stress_test.c	/^int acq_duration;$/;"	v
acq_duration	bmarks/uncontended.c	/^int acq_duration;$/;"	v
acq_time	bmarks/stress_latency.c	/^      ticks acq_time;$/;"	m	struct:thread_data::__anon8::__anon9	file:
acquire_lock	include/lock_if.h	/^static inline void acquire_lock(lock_local_data* local_d, lock_global_data* global_d) {$/;"	f
acquire_read	include/lock_if.h	/^static inline void acquire_read(lock_local_data* local_d, lock_global_data* global_d) {$/;"	f
acquire_time	bmarks/individual_ops.c	/^    ticks acquire_time;$/;"	m	struct:thread_data	file:
acquire_time	bmarks/uncontended.c	/^    ticks acquire_time;$/;"	m	struct:thread_data	file:
acquire_trylock	include/lock_if.h	/^static inline int acquire_trylock( lock_local_data* local_d, lock_global_data* global_d) {$/;"	f
acquire_write	include/lock_if.h	/^static inline void acquire_write(lock_local_data* local_d, lock_global_data* global_d) {$/;"	f
all_data_t	include/rw_ttas.h	/^typedef uint16_t all_data_t;$/;"	t
all_data_t	include/rw_ttas.h	/^typedef uint64_t all_data_t;$/;"	t
alock_lock	src/alock.c	/^void alock_lock(array_lock_t* local_lock) $/;"	f
alock_trylock	src/alock.c	/^int alock_trylock(array_lock_t* local_lock) {$/;"	f
alock_unlock	src/alock.c	/^void alock_unlock(array_lock_t* local_lock) $/;"	f
array_lock_t	include/alock.h	/^} array_lock_t;$/;"	t	typeref:struct:lock
atomic_counter	bmarks/htlock_test.c	/^uint64_t atomic_counter[8] = {0};$/;"	v
avg_q_stats	bmarks/measure_contention.c	/^double* avg_q_stats;$/;"	v
backoff	include/ttas.h	/^static inline uint32_t backoff(uint32_t limit) {$/;"	f
balance	bmarks/bank_one.c	/^    int32_t balance;$/;"	m	struct:account	file:
balance	bmarks/bank_simple.c	/^  int32_t balance;$/;"	m	struct:account	file:
balance	bmarks/bank_th.c	/^    int32_t balance;$/;"	m	struct:account	file:
balance_perc	bmarks/bank_simple.c	/^      int balance_perc;$/;"	m	struct:thread_data::__anon14::__anon15	file:
bank	bmarks/bank_one.c	/^      bank_t *bank;$/;"	m	struct:thread_data::__anon12::__anon13	file:
bank	bmarks/bank_one.c	/^typedef struct bank {$/;"	s	file:
bank	bmarks/bank_simple.c	/^      bank_t *bank;$/;"	m	struct:thread_data::__anon14::__anon15	file:
bank	bmarks/bank_simple.c	/^typedef struct bank $/;"	s	file:
bank	bmarks/bank_th.c	/^      bank_t *bank;$/;"	m	struct:thread_data::__anon16::__anon17	file:
bank	bmarks/bank_th.c	/^typedef struct bank {$/;"	s	file:
bank_t	bmarks/bank_one.c	/^} bank_t;$/;"	t	typeref:struct:bank	file:
bank_t	bmarks/bank_simple.c	/^} bank_t;$/;"	t	typeref:struct:bank	file:
bank_t	bmarks/bank_th.c	/^} bank_t;$/;"	t	typeref:struct:bank	file:
barrier	bmarks/atomic_bench.c	/^    barrier_t *barrier;$/;"	m	struct:thread_data	file:
barrier	bmarks/atomic_bench.c	/^typedef struct barrier {$/;"	s	file:
barrier	bmarks/bank_one.c	/^      barrier_t *barrier;$/;"	m	struct:thread_data::__anon12::__anon13	file:
barrier	bmarks/bank_one.c	/^typedef struct barrier {$/;"	s	file:
barrier	bmarks/bank_simple.c	/^      barrier_t *barrier;$/;"	m	struct:thread_data::__anon14::__anon15	file:
barrier	bmarks/bank_simple.c	/^typedef struct barrier $/;"	s	file:
barrier	bmarks/bank_th.c	/^      barrier_t *barrier;$/;"	m	struct:thread_data::__anon16::__anon17	file:
barrier	bmarks/bank_th.c	/^typedef struct barrier {$/;"	s	file:
barrier	bmarks/htlock_test.c	/^      barrier_t *barrier;$/;"	m	struct:thread_data::__anon10::__anon11	file:
barrier	bmarks/htlock_test.c	/^typedef struct barrier $/;"	s	file:
barrier	bmarks/individual_ops.c	/^    barrier_t *barrier;$/;"	m	struct:thread_data	file:
barrier	bmarks/individual_ops.c	/^typedef struct barrier {$/;"	s	file:
barrier	bmarks/measure_contention.c	/^      barrier_t *barrier;$/;"	m	struct:thread_data::__anon25::__anon26	file:
barrier	bmarks/measure_contention.c	/^typedef struct barrier $/;"	s	file:
barrier	bmarks/stress_latency.c	/^      barrier_t *barrier;$/;"	m	struct:thread_data::__anon8::__anon9	file:
barrier	bmarks/stress_latency.c	/^typedef struct barrier {$/;"	s	file:
barrier	bmarks/stress_one.c	/^            barrier_t *barrier;$/;"	m	struct:thread_data::__anon18::__anon19	file:
barrier	bmarks/stress_one.c	/^typedef struct barrier {$/;"	s	file:
barrier	bmarks/stress_test.c	/^            barrier_t *barrier;$/;"	m	struct:thread_data::__anon20::__anon21	file:
barrier	bmarks/stress_test.c	/^typedef struct barrier {$/;"	s	file:
barrier	bmarks/test_array_alloc.c	/^            barrier_t *barrier;$/;"	m	struct:thread_data::__anon23::__anon24	file:
barrier	bmarks/test_array_alloc.c	/^typedef struct barrier {$/;"	s	file:
barrier	bmarks/test_correctness.c	/^            barrier_t *barrier;$/;"	m	struct:thread_data::__anon27::__anon28	file:
barrier	bmarks/test_correctness.c	/^typedef struct barrier {$/;"	s	file:
barrier	bmarks/test_trylock.c	/^            barrier_t *barrier;$/;"	m	struct:thread_data::__anon6::__anon7	file:
barrier	bmarks/test_trylock.c	/^typedef struct barrier {$/;"	s	file:
barrier	bmarks/uncontended.c	/^    barrier_t *barrier;$/;"	m	struct:thread_data	file:
barrier	bmarks/uncontended.c	/^typedef struct barrier {$/;"	s	file:
barrier_cross	bmarks/atomic_bench.c	/^void barrier_cross(barrier_t *b)$/;"	f
barrier_cross	bmarks/bank_one.c	/^void barrier_cross(barrier_t *b)$/;"	f
barrier_cross	bmarks/bank_simple.c	/^void barrier_cross(barrier_t *b)$/;"	f
barrier_cross	bmarks/bank_th.c	/^void barrier_cross(barrier_t *b)$/;"	f
barrier_cross	bmarks/htlock_test.c	/^void barrier_cross(barrier_t *b)$/;"	f
barrier_cross	bmarks/individual_ops.c	/^void barrier_cross(barrier_t *b)$/;"	f
barrier_cross	bmarks/measure_contention.c	/^void barrier_cross(barrier_t *b)$/;"	f
barrier_cross	bmarks/stress_latency.c	/^void barrier_cross(barrier_t *b)$/;"	f
barrier_cross	bmarks/stress_one.c	/^void barrier_cross(barrier_t *b)$/;"	f
barrier_cross	bmarks/stress_test.c	/^void barrier_cross(barrier_t *b)$/;"	f
barrier_cross	bmarks/test_array_alloc.c	/^void barrier_cross(barrier_t *b)$/;"	f
barrier_cross	bmarks/test_correctness.c	/^void barrier_cross(barrier_t *b)$/;"	f
barrier_cross	bmarks/test_trylock.c	/^void barrier_cross(barrier_t *b)$/;"	f
barrier_cross	bmarks/uncontended.c	/^void barrier_cross(barrier_t *b)$/;"	f
barrier_init	bmarks/atomic_bench.c	/^void barrier_init(barrier_t *b, int n)$/;"	f
barrier_init	bmarks/bank_one.c	/^void barrier_init(barrier_t *b, int n)$/;"	f
barrier_init	bmarks/bank_simple.c	/^void barrier_init(barrier_t *b, int n)$/;"	f
barrier_init	bmarks/bank_th.c	/^void barrier_init(barrier_t *b, int n)$/;"	f
barrier_init	bmarks/htlock_test.c	/^void barrier_init(barrier_t *b, int n)$/;"	f
barrier_init	bmarks/individual_ops.c	/^void barrier_init(barrier_t *b, int n)$/;"	f
barrier_init	bmarks/measure_contention.c	/^void barrier_init(barrier_t *b, int n)$/;"	f
barrier_init	bmarks/stress_latency.c	/^void barrier_init(barrier_t *b, int n)$/;"	f
barrier_init	bmarks/stress_one.c	/^void barrier_init(barrier_t *b, int n)$/;"	f
barrier_init	bmarks/stress_test.c	/^void barrier_init(barrier_t *b, int n)$/;"	f
barrier_init	bmarks/test_array_alloc.c	/^void barrier_init(barrier_t *b, int n)$/;"	f
barrier_init	bmarks/test_correctness.c	/^void barrier_init(barrier_t *b, int n)$/;"	f
barrier_init	bmarks/test_trylock.c	/^void barrier_init(barrier_t *b, int n)$/;"	f
barrier_init	bmarks/uncontended.c	/^void barrier_init(barrier_t *b, int n)$/;"	f
barrier_t	bmarks/atomic_bench.c	/^} barrier_t;$/;"	t	typeref:struct:barrier	file:
barrier_t	bmarks/bank_one.c	/^} barrier_t;$/;"	t	typeref:struct:barrier	file:
barrier_t	bmarks/bank_simple.c	/^} barrier_t;$/;"	t	typeref:struct:barrier	file:
barrier_t	bmarks/bank_th.c	/^} barrier_t;$/;"	t	typeref:struct:barrier	file:
barrier_t	bmarks/htlock_test.c	/^} barrier_t;$/;"	t	typeref:struct:barrier	file:
barrier_t	bmarks/individual_ops.c	/^} barrier_t;$/;"	t	typeref:struct:barrier	file:
barrier_t	bmarks/measure_contention.c	/^} barrier_t;$/;"	t	typeref:struct:barrier	file:
barrier_t	bmarks/stress_latency.c	/^} barrier_t;$/;"	t	typeref:struct:barrier	file:
barrier_t	bmarks/stress_one.c	/^} barrier_t;$/;"	t	typeref:struct:barrier	file:
barrier_t	bmarks/stress_test.c	/^} barrier_t;$/;"	t	typeref:struct:barrier	file:
barrier_t	bmarks/test_array_alloc.c	/^} barrier_t;$/;"	t	typeref:struct:barrier	file:
barrier_t	bmarks/test_correctness.c	/^} barrier_t;$/;"	t	typeref:struct:barrier	file:
barrier_t	bmarks/test_trylock.c	/^} barrier_t;$/;"	t	typeref:struct:barrier	file:
barrier_t	bmarks/uncontended.c	/^} barrier_t;$/;"	t	typeref:struct:barrier	file:
benchmark	bmarks/atomic_bench.c	/^int benchmark;$/;"	v
c	bmarks/measure_contention.c	/^uint64_t c[2] = {0, 0};$/;"	v
c	bmarks/stress_one.c	/^uint64_t c[2] = {0, 0};$/;"	v
c	bmarks/stress_test.c	/^uint64_t c[2] = {0, 0};$/;"	v
c	bmarks/test_array_alloc.c	/^uint64_t c[2] = {0, 0};$/;"	v
c	bmarks/test_correctness.c	/^uint64_t c[2] = {0, 0};$/;"	v
c	bmarks/test_trylock.c	/^uint64_t c[2] = {0, 0};$/;"	v
catcher	bmarks/atomic_bench.c	/^void catcher(int sig)$/;"	f
catcher	bmarks/bank_one.c	/^void catcher(int sig)$/;"	f
catcher	bmarks/bank_simple.c	/^void catcher(int sig)$/;"	f
catcher	bmarks/bank_th.c	/^void catcher(int sig)$/;"	f
catcher	bmarks/htlock_test.c	/^void catcher(int sig)$/;"	f
catcher	bmarks/individual_ops.c	/^void catcher(int sig)$/;"	f
catcher	bmarks/measure_contention.c	/^void catcher(int sig)$/;"	f
catcher	bmarks/stress_latency.c	/^void catcher(int sig)$/;"	f
catcher	bmarks/stress_one.c	/^void catcher(int sig)$/;"	f
catcher	bmarks/stress_test.c	/^void catcher(int sig)$/;"	f
catcher	bmarks/test_array_alloc.c	/^void catcher(int sig)$/;"	f
catcher	bmarks/test_correctness.c	/^void catcher(int sig)$/;"	f
catcher	bmarks/test_trylock.c	/^void catcher(int sig)$/;"	f
catcher	bmarks/uncontended.c	/^void catcher(int sig)$/;"	f
cdelay	include/utils.h	/^    static inline void cdelay(ticks cycles){$/;"	f
check	bmarks/bank_simple.c	/^check(account_t *a1,  int thread_id)$/;"	f
cl_access	bmarks/measure_contention.c	/^int cl_access;$/;"	v
cl_access	bmarks/stress_latency.c	/^int cl_access;$/;"	v
cl_access	bmarks/stress_one.c	/^int cl_access;$/;"	v
cl_access	bmarks/stress_test.c	/^int cl_access;$/;"	v
clh_acquire	src/clh.c	/^volatile clh_qnode* clh_acquire(clh_lock *L, clh_qnode* I ) $/;"	f
clh_global_params	include/clh.h	/^typedef struct clh_global_params {$/;"	s
clh_global_params	include/clh.h	/^} clh_global_params;$/;"	t	typeref:struct:clh_global_params
clh_local_params	include/clh.h	/^typedef struct clh_local_params {$/;"	s
clh_local_params	include/clh.h	/^} clh_local_params;$/;"	t	typeref:struct:clh_local_params
clh_lock	include/clh.h	/^typedef clh_qnode_ptr clh_lock;$/;"	t
clh_qnode	include/clh.h	/^typedef struct clh_qnode {$/;"	s
clh_qnode	include/clh.h	/^} clh_qnode;$/;"	t	typeref:struct:clh_qnode
clh_qnode_ptr	include/clh.h	/^typedef volatile clh_qnode *clh_qnode_ptr;$/;"	t
clh_release	src/clh.c	/^clh_qnode* clh_release(clh_qnode *my_qnode, clh_qnode * my_pred) {$/;"	f
clh_trylock	src/clh.c	/^int clh_trylock(clh_lock * L, clh_qnode_ptr I) {$/;"	f
cluster_id	bmarks/bank_one.c	/^__thread uint32_t cluster_id;$/;"	v
cluster_id	bmarks/bank_simple.c	/^__thread uint32_t cluster_id;$/;"	v
cluster_id	bmarks/bank_th.c	/^__thread uint32_t cluster_id;$/;"	v
cluster_id	bmarks/htlock_test.c	/^__thread uint32_t cluster_id;$/;"	v
cluster_id	bmarks/individual_ops.c	/^__thread uint32_t cluster_id;$/;"	v
cluster_id	bmarks/measure_contention.c	/^__thread uint32_t cluster_id;$/;"	v
cluster_id	bmarks/stress_latency.c	/^__thread uint32_t cluster_id;$/;"	v
cluster_id	bmarks/stress_one.c	/^__thread uint32_t cluster_id;$/;"	v
cluster_id	bmarks/stress_test.c	/^__thread uint32_t cluster_id;$/;"	v
cluster_id	bmarks/test_array_alloc.c	/^__thread uint32_t cluster_id;$/;"	v
cluster_id	bmarks/test_correctness.c	/^__thread uint32_t cluster_id;$/;"	v
cluster_id	bmarks/test_trylock.c	/^__thread uint32_t cluster_id;$/;"	v
cluster_id	bmarks/uncontended.c	/^__thread uint32_t cluster_id;$/;"	v
cluster_id	include/hclh.h	/^    volatile uint8_t cluster_id;$/;"	m	struct:node_fields
complete	bmarks/atomic_bench.c	/^    pthread_cond_t complete;$/;"	m	struct:barrier	file:
complete	bmarks/bank_one.c	/^    pthread_cond_t complete;$/;"	m	struct:barrier	file:
complete	bmarks/bank_simple.c	/^  pthread_cond_t complete;$/;"	m	struct:barrier	file:
complete	bmarks/bank_th.c	/^    pthread_cond_t complete;$/;"	m	struct:barrier	file:
complete	bmarks/htlock_test.c	/^  pthread_cond_t complete;$/;"	m	struct:barrier	file:
complete	bmarks/individual_ops.c	/^    pthread_cond_t complete;$/;"	m	struct:barrier	file:
complete	bmarks/measure_contention.c	/^  pthread_cond_t complete;$/;"	m	struct:barrier	file:
complete	bmarks/stress_latency.c	/^    pthread_cond_t complete;$/;"	m	struct:barrier	file:
complete	bmarks/stress_one.c	/^    pthread_cond_t complete;$/;"	m	struct:barrier	file:
complete	bmarks/stress_test.c	/^    pthread_cond_t complete;$/;"	m	struct:barrier	file:
complete	bmarks/test_array_alloc.c	/^    pthread_cond_t complete;$/;"	m	struct:barrier	file:
complete	bmarks/test_correctness.c	/^    pthread_cond_t complete;$/;"	m	struct:barrier	file:
complete	bmarks/test_trylock.c	/^    pthread_cond_t complete;$/;"	m	struct:barrier	file:
complete	bmarks/uncontended.c	/^    pthread_cond_t complete;$/;"	m	struct:barrier	file:
correction	bmarks/atomic_bench.c	/^ticks correction;$/;"	v
correction	bmarks/individual_ops.c	/^ticks correction;$/;"	v
correction	bmarks/stress_latency.c	/^ticks correction;$/;"	v
correction	bmarks/uncontended.c	/^ticks correction;$/;"	v
count	bmarks/atomic_bench.c	/^    int count;$/;"	m	struct:barrier	file:
count	bmarks/bank_one.c	/^    int count;$/;"	m	struct:barrier	file:
count	bmarks/bank_simple.c	/^  int count;$/;"	m	struct:barrier	file:
count	bmarks/bank_th.c	/^    int count;$/;"	m	struct:barrier	file:
count	bmarks/htlock_test.c	/^  int count;$/;"	m	struct:barrier	file:
count	bmarks/individual_ops.c	/^    int count;$/;"	m	struct:barrier	file:
count	bmarks/measure_contention.c	/^  int count;$/;"	m	struct:barrier	file:
count	bmarks/stress_latency.c	/^    int count;$/;"	m	struct:barrier	file:
count	bmarks/stress_one.c	/^    int count;$/;"	m	struct:barrier	file:
count	bmarks/stress_test.c	/^    int count;$/;"	m	struct:barrier	file:
count	bmarks/test_array_alloc.c	/^    int count;$/;"	m	struct:barrier	file:
count	bmarks/test_correctness.c	/^    int count;$/;"	m	struct:barrier	file:
count	bmarks/test_trylock.c	/^    int count;$/;"	m	struct:barrier	file:
count	bmarks/uncontended.c	/^    int count;$/;"	m	struct:barrier	file:
counter	bmarks/test_array_alloc.c	/^    volatile uint64_t counter;$/;"	m	struct:shared_data	file:
counter	bmarks/test_correctness.c	/^    volatile uint64_t counter;$/;"	m	struct:shared_data	file:
counter	bmarks/test_trylock.c	/^    volatile uint64_t counter;$/;"	m	struct:shared_data	file:
cpause	include/utils.h	/^    static inline void cpause(ticks cycles){$/;"	f
create_htlock	src/htlock.c	/^int create_htlock(htlock_t* htl)$/;"	f
create_htlock_no_alloc	src/htlock.c	/^create_htlock_no_alloc(htlock_t* htl, htlock_local_t* locals[NUMBER_OF_SOCKETS], size_t offset)$/;"	f	file:
create_ticketlock	src/ticket.c	/^int create_ticketlock(ticketlock_t* the_lock) $/;"	f
crossing	bmarks/atomic_bench.c	/^    int crossing;$/;"	m	struct:barrier	file:
crossing	bmarks/bank_one.c	/^    int crossing;$/;"	m	struct:barrier	file:
crossing	bmarks/bank_simple.c	/^  int crossing;$/;"	m	struct:barrier	file:
crossing	bmarks/bank_th.c	/^    int crossing;$/;"	m	struct:barrier	file:
crossing	bmarks/htlock_test.c	/^  int crossing;$/;"	m	struct:barrier	file:
crossing	bmarks/individual_ops.c	/^    int crossing;$/;"	m	struct:barrier	file:
crossing	bmarks/measure_contention.c	/^  int crossing;$/;"	m	struct:barrier	file:
crossing	bmarks/stress_latency.c	/^    int crossing;$/;"	m	struct:barrier	file:
crossing	bmarks/stress_one.c	/^    int crossing;$/;"	m	struct:barrier	file:
crossing	bmarks/stress_test.c	/^    int crossing;$/;"	m	struct:barrier	file:
crossing	bmarks/test_array_alloc.c	/^    int crossing;$/;"	m	struct:barrier	file:
crossing	bmarks/test_correctness.c	/^    int crossing;$/;"	m	struct:barrier	file:
crossing	bmarks/test_trylock.c	/^    int crossing;$/;"	m	struct:barrier	file:
crossing	bmarks/uncontended.c	/^    int crossing;$/;"	m	struct:barrier	file:
cur	include/htlock.h	/^    volatile int32_t cur;$/;"	m	struct:htlock_local
cur	include/htlock.h	/^    volatile uint32_t cur;$/;"	m	struct:htlock_global
data	bmarks/atomic_bench.c	/^    data_type data;$/;"	m	union:__anon22	file:
data	include/hclh.h	/^        volatile uint32_t data;$/;"	m	union:qnode::__anon2
data_t	bmarks/atomic_bench.c	/^} data_t;$/;"	t	typeref:union:__anon22	file:
data_type	bmarks/atomic_bench.c	/^typedef volatile uint32_t data_type;$/;"	t	file:
data_type	bmarks/atomic_bench.c	/^typedef volatile uint8_t data_type;$/;"	t	file:
deposit	bmarks/bank_simple.c	/^deposit(account_t *src, int amount, int thread_id)$/;"	f
deposit_perc	bmarks/bank_simple.c	/^      int deposit_perc;$/;"	m	struct:thread_data::__anon14::__anon15	file:
disjoint	bmarks/bank_one.c	/^      int disjoint;$/;"	m	struct:thread_data::__anon12::__anon13	file:
disjoint	bmarks/bank_th.c	/^      int disjoint;$/;"	m	struct:thread_data::__anon16::__anon17	file:
do_something	samples/sample_generic.c	/^void *do_something(void *id)$/;"	f
do_something	samples/sample_mcs.c	/^void *do_something(void *id)$/;"	f
do_writes	bmarks/measure_contention.c	/^int do_writes;$/;"	v
do_writes	bmarks/stress_latency.c	/^int do_writes;$/;"	v
do_writes	bmarks/stress_one.c	/^int do_writes;$/;"	v
do_writes	bmarks/stress_test.c	/^int do_writes;$/;"	v
duration	bmarks/atomic_bench.c	/^int duration;$/;"	v
duration	bmarks/htlock_test.c	/^int duration;$/;"	v
duration	bmarks/individual_ops.c	/^int duration;$/;"	v
duration	bmarks/measure_contention.c	/^int duration;$/;"	v
duration	bmarks/stress_latency.c	/^int duration;$/;"	v
duration	bmarks/stress_one.c	/^int duration;$/;"	v
duration	bmarks/stress_test.c	/^int duration;$/;"	v
duration	bmarks/test_array_alloc.c	/^int duration;$/;"	v
duration	bmarks/test_correctness.c	/^int duration;$/;"	v
duration	bmarks/test_trylock.c	/^int duration;$/;"	v
duration	bmarks/uncontended.c	/^int duration;$/;"	v
end_alock_array_global	src/alock.c	/^void end_alock_array_global(lock_shared_t* the_locks, uint32_t size) {$/;"	f
end_alock_array_local	src/alock.c	/^void end_alock_array_local(array_lock_t* local_locks, uint32_t size) {$/;"	f
end_alock_global	src/alock.c	/^void end_alock_global(lock_shared_t the_lock) {$/;"	f
end_alock_local	src/alock.c	/^void end_alock_local(array_lock_t local_lock) {$/;"	f
end_clh_array_global	src/clh.c	/^void end_clh_array_global(clh_global_params* the_locks, uint32_t size) {$/;"	f
end_clh_array_local	src/clh.c	/^void end_clh_array_local(clh_local_params* the_params, uint32_t size){$/;"	f
end_clh_global	src/clh.c	/^void end_clh_global(clh_global_params the_lock) {$/;"	f
end_clh_local	src/clh.c	/^void end_clh_local(clh_local_params the_params){$/;"	f
end_hclh_array_global	src/hclh.c	/^void end_hclh_array_global(hclh_global_params* global_params, uint32_t size) {$/;"	f
end_hclh_array_local	src/hclh.c	/^void end_hclh_array_local(hclh_local_params* local_params, uint32_t size) {$/;"	f
end_hclh_global	src/hclh.c	/^void end_hclh_global(hclh_global_params global_params) {$/;"	f
end_hclh_local	src/hclh.c	/^void end_hclh_local(hclh_local_params local_params) {$/;"	f
end_mcs_array_global	src/mcs.c	/^void end_mcs_array_global(mcs_global_params* the_locks, uint32_t size) {$/;"	f
end_mcs_array_local	src/mcs.c	/^void end_mcs_array_local(mcs_qnode** the_qnodes, uint32_t size) {$/;"	f
end_mcs_global	src/mcs.c	/^void end_mcs_global(mcs_global_params the_locks) {$/;"	f
end_mcs_local	src/mcs.c	/^void end_mcs_local(mcs_qnode* the_qnodes) {$/;"	f
end_rw_ttas_array_global	src/rw_ttas.c	/^void end_rw_ttas_array_global(rw_ttas* the_locks) {$/;"	f
end_rw_ttas_array_local	src/rw_ttas.c	/^void end_rw_ttas_array_local(uint32_t* limits) {$/;"	f
end_rw_ttas_global	src/rw_ttas.c	/^void end_rw_ttas_global() {$/;"	f
end_rw_ttas_local	src/rw_ttas.c	/^void end_rw_ttas_local() {$/;"	f
end_spinlock_array_global	src/spinlock.c	/^void end_spinlock_array_global(spinlock_lock_t* the_locks) $/;"	f
end_spinlock_array_local	src/spinlock.c	/^void end_spinlock_array_local(uint32_t* limits) $/;"	f
end_spinlock_global	src/spinlock.c	/^void end_spinlock_global() $/;"	f
end_spinlock_local	src/spinlock.c	/^void end_spinlock_local() $/;"	f
end_ttas_array_global	src/ttas.c	/^void end_ttas_array_global(ttas_lock_t* the_locks) {$/;"	f
end_ttas_array_local	src/ttas.c	/^void end_ttas_array_local(uint32_t* limits) {$/;"	f
end_ttas_global	src/ttas.c	/^void end_ttas_global() {$/;"	f
end_ttas_local	src/ttas.c	/^void end_ttas_local() {$/;"	f
fair_delay	bmarks/measure_contention.c	/^int fair_delay;$/;"	v
fair_delay	bmarks/stress_latency.c	/^int fair_delay;$/;"	v
fair_delay	bmarks/stress_one.c	/^int fair_delay;$/;"	v
fair_delay	bmarks/stress_test.c	/^int fair_delay;$/;"	v
fast_rand	include/utils.h	/^    static inline uint32_t fast_rand() {$/;"	f
fields	include/hclh.h	/^        node_fields fields;$/;"	m	union:qnode::__anon2
flag	include/alock.h	/^    volatile uint16_t flag;$/;"	m	struct:flag_line
flag_line	include/alock.h	/^typedef struct flag_line {$/;"	s
flag_t	include/alock.h	/^} flag_t;$/;"	t	typeref:struct:flag_line
flags	include/alock.h	/^    flag_t flags[MAX_NUM_PROCESSES]; $/;"	m	struct:lock_shared
free_htlocks	src/htlock.c	/^free_htlocks(htlock_t* locks)$/;"	f
free_lock_array_global	include/lock_if.h	/^static inline void free_lock_array_global(global_data the_locks, int num_locks) {$/;"	f
free_lock_array_local	include/lock_if.h	/^static inline void free_lock_array_local(local_data local_d, int num_locks){$/;"	f
free_lock_global	include/lock_if.h	/^static inline void free_lock_global(lock_global_data the_lock) {$/;"	f
free_lock_local	include/lock_if.h	/^static inline void free_lock_local(lock_local_data local_d){$/;"	f
free_ticketlocks	src/ticket.c	/^free_ticketlocks(ticketlock_t* the_locks) $/;"	f
get_cluster	include/platform_defs.h	/^    static inline int get_cluster(int thread_id) {$/;"	f
get_noop_duration	include/utils.h	/^    static inline ticks get_noop_duration() {$/;"	f
getticks	include/utils.h	/^    static inline ticks getticks() {$/;"	f
getticks	include/utils.h	/^    static inline ticks getticks(){$/;"	f
getticks	include/utils.h	/^    static inline ticks getticks(void) {$/;"	f
getticks	include/utils.h	/^    static inline ticks getticks(void)$/;"	f
getticks_correction_calc	include/utils.h	/^    static inline ticks getticks_correction_calc() {$/;"	f
gl	bmarks/bank_one.c	/^static global_lock gl;$/;"	v	file:
gl	bmarks/bank_simple.c	/^static global_lock gl;$/;"	v	file:
gl	bmarks/bank_th.c	/^static global_lock gl;$/;"	v	file:
global	include/htlock.h	/^    htlock_global_t* global;$/;"	m	struct:htlock
global_acquire_read	src/gl_lock.c	/^void global_acquire_read(global_lock* gl) {$/;"	f
global_acquire_write	src/gl_lock.c	/^void global_acquire_write(global_lock* gl) {$/;"	f
global_data	include/lock_if.h	/^typedef lock_global_data* global_data;$/;"	t
global_lock	include/gl_lock.h	/^    volatile unsigned short global_lock;$/;"	m	struct:glock_2
global_lock	include/gl_lock.h	/^typedef struct global_lock {$/;"	s
global_lock	include/gl_lock.h	/^} global_lock;$/;"	t	typeref:struct:global_lock
global_queue	include/hclh.h	/^typedef qnode_ptr global_queue;$/;"	t
global_read	include/gl_lock.h	/^    volatile unsigned char global_read;$/;"	m	struct:glock
global_unlock_read	src/gl_lock.c	/^void global_unlock_read(global_lock* gl){$/;"	f
global_unlock_write	src/gl_lock.c	/^void global_unlock_write(global_lock* gl) {$/;"	f
global_write	include/gl_lock.h	/^    volatile unsigned char global_write;$/;"	m	struct:glock
glock	include/gl_lock.h	/^typedef struct glock{$/;"	s
glock	include/gl_lock.h	/^} glock;$/;"	t	typeref:struct:glock
glock_2	include/gl_lock.h	/^typedef struct glock_2{$/;"	s
glock_2	include/gl_lock.h	/^} glock_2;$/;"	t	typeref:struct:glock_2
hclh_acquire	src/hclh.c	/^volatile qnode * hclh_acquire(local_queue *lq, global_queue *gq, qnode *my_qnode) {$/;"	f
hclh_global_params	include/hclh.h	/^typedef struct hclh_global_params {$/;"	s
hclh_global_params	include/hclh.h	/^} hclh_global_params;$/;"	t	typeref:struct:hclh_global_params
hclh_local_params	include/hclh.h	/^typedef struct hclh_local_params {$/;"	s
hclh_local_params	include/hclh.h	/^} hclh_local_params;$/;"	t	typeref:struct:hclh_local_params
hclh_node_mine	src/hclh.c	/^__thread uint32_t hclh_node_mine;$/;"	v
hclh_release	src/hclh.c	/^qnode* hclh_release(qnode *my_qnode, qnode * my_pred) {$/;"	f
head	bmarks/individual_ops.c	/^volatile uint32_t head;$/;"	v
head	bmarks/uncontended.c	/^volatile uint32_t head;$/;"	v
head	include/ticket.h	/^    volatile uint16_t head;$/;"	m	struct:ticketlock_t
home_core	bmarks/uncontended.c	/^int home_core;$/;"	v
htlock	include/htlock.h	/^typedef struct ALIGNED(CACHE_LINE_SIZE) htlock$/;"	s
htlock_global	include/htlock.h	/^typedef struct htlock_global$/;"	s
htlock_global_t	include/htlock.h	/^} htlock_global_t;$/;"	t	typeref:struct:htlock_global
htlock_id_mine	src/htlock.c	/^__thread uint32_t htlock_node_mine, htlock_id_mine;$/;"	v
htlock_local	include/htlock.h	/^typedef struct htlock_local$/;"	s
htlock_local_t	include/htlock.h	/^} htlock_local_t;$/;"	t	typeref:struct:htlock_local
htlock_lock	src/htlock.c	/^htlock_lock(htlock_t* l)$/;"	f
htlock_node_mine	src/htlock.c	/^__thread uint32_t htlock_node_mine, htlock_id_mine;$/;"	v
htlock_release	src/htlock.c	/^htlock_release(htlock_t* l)$/;"	f
htlock_release_try	src/htlock.c	/^htlock_release_try(htlock_t* l)	\/* trylock rls *\/$/;"	f
htlock_t	include/htlock.h	/^} htlock_t;$/;"	t	typeref:struct:htlock
htlock_trylock	src/htlock.c	/^htlock_trylock(htlock_t* l)$/;"	f
htlock_wait_global	src/htlock.c	/^htlock_wait_global(htlock_local_t* lock, const uint32_t ticket)$/;"	f	file:
htlock_wait_ticket	src/htlock.c	/^htlock_wait_ticket(htlock_local_t* lock, const uint32_t ticket)$/;"	f	file:
id	bmarks/atomic_bench.c	/^    int id;$/;"	m	struct:thread_data	file:
id	bmarks/bank_one.c	/^      int id;$/;"	m	struct:thread_data::__anon12::__anon13	file:
id	bmarks/bank_simple.c	/^      int id;$/;"	m	struct:thread_data::__anon14::__anon15	file:
id	bmarks/bank_th.c	/^      int id;$/;"	m	struct:thread_data::__anon16::__anon17	file:
id	bmarks/htlock_test.c	/^      int id;$/;"	m	struct:thread_data::__anon10::__anon11	file:
id	bmarks/individual_ops.c	/^    int id;$/;"	m	struct:thread_data	file:
id	bmarks/measure_contention.c	/^      int id;$/;"	m	struct:thread_data::__anon25::__anon26	file:
id	bmarks/stress_latency.c	/^      int id;$/;"	m	struct:thread_data::__anon8::__anon9	file:
id	bmarks/stress_one.c	/^            int id;$/;"	m	struct:thread_data::__anon18::__anon19	file:
id	bmarks/stress_test.c	/^            int id;$/;"	m	struct:thread_data::__anon20::__anon21	file:
id	bmarks/test_array_alloc.c	/^            int id;$/;"	m	struct:thread_data::__anon23::__anon24	file:
id	bmarks/test_correctness.c	/^            int id;$/;"	m	struct:thread_data::__anon27::__anon28	file:
id	bmarks/test_trylock.c	/^            int id;$/;"	m	struct:thread_data::__anon6::__anon7	file:
id	bmarks/uncontended.c	/^    int id;$/;"	m	struct:thread_data	file:
init_alock_array_global	src/alock.c	/^lock_shared_t* init_alock_array_global(uint32_t num_locks, uint32_t num_processes) {$/;"	f
init_alock_array_local	src/alock.c	/^array_lock_t* init_alock_array_local(uint32_t thread_num, uint32_t num_locks, lock_shared_t* the_locks) {$/;"	f
init_alock_global	src/alock.c	/^int init_alock_global(uint32_t num_processes, lock_shared_t* the_lock) {$/;"	f
init_alock_local	src/alock.c	/^int init_alock_local(uint32_t thread_num, lock_shared_t* the_lock, array_lock_t* local_lock) {$/;"	f
init_clh_array_global	src/clh.c	/^clh_global_params* init_clh_array_global(uint32_t num_locks) {$/;"	f
init_clh_array_local	src/clh.c	/^clh_local_params* init_clh_array_local(uint32_t thread_num, uint32_t num_locks) {$/;"	f
init_clh_global	src/clh.c	/^int init_clh_global(clh_global_params* the_params) {$/;"	f
init_clh_local	src/clh.c	/^int init_clh_local(uint32_t thread_num, clh_local_params* local_params) {$/;"	f
init_done	include/hclh.h	/^    volatile uint32_t* init_done;$/;"	m	struct:hclh_global_params
init_hclh_array_global	src/hclh.c	/^hclh_global_params* init_hclh_array_global(uint32_t num_locks) {$/;"	f
init_hclh_array_local	src/hclh.c	/^hclh_local_params* init_hclh_array_local(uint32_t phys_core, uint32_t num_locks, hclh_global_params* the_params) {$/;"	f
init_hclh_global	src/hclh.c	/^int init_hclh_global(hclh_global_params* the_params) {$/;"	f
init_hclh_local	src/hclh.c	/^int init_hclh_local(uint32_t phys_core, hclh_global_params* the_params, hclh_local_params* local_params) {$/;"	f
init_htlock	src/htlock.c	/^init_htlock(htlock_t* htl)$/;"	f
init_htlocks	src/htlock.c	/^init_htlocks(uint32_t num_locks)$/;"	f
init_lock_array_global	include/lock_if.h	/^static inline global_data init_lock_array_global(int num_locks, int num_threads){$/;"	f
init_lock_array_local	include/lock_if.h	/^static inline local_data init_lock_array_local(int core_to_pin, int num_locks, global_data the_locks){$/;"	f
init_lock_global	include/lock_if.h	/^static inline int init_lock_global(lock_global_data* the_lock){$/;"	f
init_lock_global_nt	include/lock_if.h	/^static inline int init_lock_global_nt(int num_threads, lock_global_data* the_lock) {$/;"	f
init_lock_local	include/lock_if.h	/^static inline int init_lock_local(int core_to_pin,  lock_global_data* the_lock, lock_local_data* local_data){$/;"	f
init_mcs_array_global	src/mcs.c	/^mcs_global_params* init_mcs_array_global(uint32_t num_locks) {$/;"	f
init_mcs_array_local	src/mcs.c	/^mcs_qnode** init_mcs_array_local(uint32_t thread_num, uint32_t num_locks) {$/;"	f
init_mcs_global	src/mcs.c	/^int init_mcs_global(mcs_global_params* the_lock) {$/;"	f
init_mcs_local	src/mcs.c	/^int init_mcs_local(uint32_t thread_num, mcs_qnode** the_qnode) {$/;"	f
init_rw_ttas_array_global	src/rw_ttas.c	/^rw_ttas* init_rw_ttas_array_global(uint32_t num_locks) {$/;"	f
init_rw_ttas_array_local	src/rw_ttas.c	/^uint32_t* init_rw_ttas_array_local(uint32_t thread_num, uint32_t size){$/;"	f
init_rw_ttas_global	src/rw_ttas.c	/^int init_rw_ttas_global(rw_ttas* the_lock) {$/;"	f
init_rw_ttas_local	src/rw_ttas.c	/^int init_rw_ttas_local(uint32_t thread_num, uint32_t * limit){$/;"	f
init_spinlock_array_global	src/spinlock.c	/^spinlock_lock_t* init_spinlock_array_global(uint32_t num_locks) $/;"	f
init_spinlock_array_local	src/spinlock.c	/^uint32_t* init_spinlock_array_local(uint32_t thread_num, uint32_t size)$/;"	f
init_spinlock_global	src/spinlock.c	/^int init_spinlock_global(spinlock_lock_t* the_lock) $/;"	f
init_spinlock_local	src/spinlock.c	/^int init_spinlock_local(uint32_t thread_num, uint32_t* limit)$/;"	f
init_thread_htlocks	src/htlock.c	/^init_thread_htlocks(uint32_t phys_core)$/;"	f
init_thread_ticketlocks	src/ticket.c	/^void init_thread_ticketlocks(uint32_t thread_num) $/;"	f
init_ticketlocks	src/ticket.c	/^init_ticketlocks(uint32_t num_locks) $/;"	f
init_ttas_array_global	src/ttas.c	/^ttas_lock_t* init_ttas_array_global(uint32_t num_locks) {$/;"	f
init_ttas_array_local	src/ttas.c	/^uint32_t* init_ttas_array_local(uint32_t thread_num, uint32_t size){$/;"	f
init_ttas_global	src/ttas.c	/^int init_ttas_global(ttas_lock_t* the_lock) {$/;"	f
init_ttas_local	src/ttas.c	/^int init_ttas_local(uint32_t thread_num , uint32_t* limit){$/;"	f
is_free_alock	src/alock.c	/^int is_free_alock(lock_shared_t* the_lock) {$/;"	f
is_free_hclh	src/hclh.c	/^int is_free_hclh(local_queue *lq, global_queue *gq, qnode *my_qnode) {$/;"	f
is_free_hticket	src/htlock.c	/^is_free_hticket(htlock_t* htl)$/;"	f
is_free_mcs	src/mcs.c	/^int is_free_mcs(mcs_lock *L ){$/;"	f
is_free_rw	src/rw_ttas.c	/^int is_free_rw(rw_ttas* lock){$/;"	f
is_free_spinlock	src/spinlock.c	/^int is_free_spinlock(spinlock_lock_t * the_lock){$/;"	f
is_free_ticket	src/ticket.c	/^int is_free_ticket(ticketlock_t* t)$/;"	f
is_free_ttas	src/ttas.c	/^int is_free_ttas(ttas_lock_t * the_lock){$/;"	f
local	include/htlock.h	/^    htlock_local_t* local[NUMBER_OF_SOCKETS];$/;"	m	struct:htlock
local_data	include/lock_if.h	/^typedef lock_local_data* local_data;$/;"	t
local_lock	include/gl_lock.h	/^    volatile unsigned short local_lock;$/;"	m	struct:glock_2
local_lock_read	src/gl_lock.c	/^void local_lock_read(global_lock* gl) {$/;"	f
local_lock_write	src/gl_lock.c	/^void local_lock_write(global_lock* gl) {$/;"	f
local_queue	include/hclh.h	/^typedef qnode_ptr local_queue;$/;"	t
local_queues	include/hclh.h	/^    local_queue** local_queues;$/;"	m	struct:hclh_global_params
local_read	include/gl_lock.h	/^    volatile unsigned char local_read;$/;"	m	struct:glock
local_th_data	bmarks/bank_one.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) lock_local_data * local_th_data;$/;"	v
local_th_data	bmarks/bank_simple.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile local_data * local_th_data;$/;"	v
local_th_data	bmarks/bank_th.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile local_data * local_th_data;$/;"	v
local_th_data	bmarks/individual_ops.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile local_data * local_th_data;$/;"	v
local_th_data	bmarks/measure_contention.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile local_data* local_th_data;$/;"	v
local_th_data	bmarks/stress_latency.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile local_data* local_th_data;$/;"	v
local_th_data	bmarks/stress_one.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) lock_local_data* local_th_data;$/;"	v
local_th_data	bmarks/stress_test.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile local_data* local_th_data;$/;"	v
local_th_data	bmarks/test_array_alloc.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile local_data* local_th_data;$/;"	v
local_th_data	bmarks/test_correctness.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) lock_local_data* local_th_data;$/;"	v
local_th_data	bmarks/test_trylock.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) lock_local_data* local_th_data;$/;"	v
local_th_data	bmarks/uncontended.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile local_data * local_th_data;$/;"	v
local_unlock_read	src/gl_lock.c	/^void local_unlock_read(global_lock* gl){$/;"	f
local_unlock_write	src/gl_lock.c	/^void local_unlock_write(global_lock* gl){$/;"	f
local_write	include/gl_lock.h	/^    volatile unsigned char local_write;$/;"	m	struct:glock
lock	include/alock.h	/^typedef struct lock {$/;"	s
lock	include/gl_lock.h	/^        glock lock;$/;"	m	union:global_lock::__anon3
lock	include/spinlock.h	/^        spinlock_lock_data_t lock;$/;"	m	union:spinlock_lock_t::__anon1
lock	include/ttas.h	/^        ttas_lock_data_t lock;$/;"	m	union:ttas_lock_t::__anon4
lock_data	include/gl_lock.h	/^        volatile unsigned int lock_data;$/;"	m	union:global_lock::__anon3
lock_data	include/rw_ttas.h	/^        volatile all_data_t lock_data;$/;"	m	union:rw_ttas::__anon5
lock_global_data	include/lock_if.h	/^typedef clh_global_params lock_global_data;$/;"	t
lock_global_data	include/lock_if.h	/^typedef hclh_global_params lock_global_data;$/;"	t
lock_global_data	include/lock_if.h	/^typedef htlock_t lock_global_data;$/;"	t
lock_global_data	include/lock_if.h	/^typedef lock_shared_t lock_global_data;$/;"	t
lock_global_data	include/lock_if.h	/^typedef mcs_global_params lock_global_data;$/;"	t
lock_global_data	include/lock_if.h	/^typedef pthread_mutex_t lock_global_data;$/;"	t
lock_global_data	include/lock_if.h	/^typedef rw_ttas lock_global_data;$/;"	t
lock_global_data	include/lock_if.h	/^typedef spinlock_lock_t lock_global_data;$/;"	t
lock_global_data	include/lock_if.h	/^typedef ticketlock_t lock_global_data;$/;"	t
lock_global_data	include/lock_if.h	/^typedef ttas_lock_t  lock_global_data;$/;"	t
lock_local_data	include/lock_if.h	/^typedef array_lock_t lock_local_data;$/;"	t
lock_local_data	include/lock_if.h	/^typedef clh_local_params lock_local_data;$/;"	t
lock_local_data	include/lock_if.h	/^typedef hclh_local_params lock_local_data;$/;"	t
lock_local_data	include/lock_if.h	/^typedef mcs_local_params lock_local_data;$/;"	t
lock_local_data	include/lock_if.h	/^typedef unsigned int  lock_local_data;$/;"	t
lock_local_data	include/lock_if.h	/^typedef unsigned int lock_local_data;$/;"	t
lock_local_data	include/lock_if.h	/^typedef void* lock_local_data;\/\/no local data for hticket locks$/;"	t
lock_local_data	include/lock_if.h	/^typedef void* lock_local_data;\/\/no local data for mutexes$/;"	t
lock_local_data	include/lock_if.h	/^typedef void* lock_local_data;\/\/no local data for ticket locks$/;"	t
lock_shared	include/alock.h	/^typedef struct lock_shared {$/;"	s
lock_shared_t	include/alock.h	/^} lock_shared_t;$/;"	t	typeref:struct:lock_shared
lock_short	include/gl_lock.h	/^        glock_2 lock_short;$/;"	m	union:global_lock::__anon3
locked	include/clh.h	/^    volatile uint8_t locked;$/;"	m	struct:clh_qnode
locks	bmarks/htlock_test.c	/^      htlock_t* locks;$/;"	m	struct:thread_data::__anon10::__anon11	file:
main	bmarks/atomic_bench.c	/^int main(int argc, char* const argv[])$/;"	f
main	bmarks/bank_one.c	/^int main(int argc, char **argv)$/;"	f
main	bmarks/bank_simple.c	/^main(int argc, char **argv)$/;"	f
main	bmarks/bank_th.c	/^int main(int argc, char **argv)$/;"	f
main	bmarks/htlock_test.c	/^main(int argc, char* const argv[])$/;"	f
main	bmarks/individual_ops.c	/^int main(int argc, char **argv)$/;"	f
main	bmarks/measure_contention.c	/^int main(int argc, char **argv)$/;"	f
main	bmarks/stress_latency.c	/^int main(int argc, char **argv)$/;"	f
main	bmarks/stress_one.c	/^int main(int argc, char **argv)$/;"	f
main	bmarks/stress_test.c	/^int main(int argc, char **argv)$/;"	f
main	bmarks/test_array_alloc.c	/^int main(int argc, char **argv)$/;"	f
main	bmarks/test_correctness.c	/^int main(int argc, char **argv)$/;"	f
main	bmarks/test_trylock.c	/^int main(int argc, char **argv)$/;"	f
main	bmarks/uncontended.c	/^int main(int argc, char **argv)$/;"	f
main	dump/test_atomics.c	/^int main (int argc, char* argv []) {$/;"	f
main	samples/sample_generic.c	/^int main(int argc, char *argv[])$/;"	f
main	samples/sample_mcs.c	/^int main(int argc, char *argv[])$/;"	f
mcs_acquire	src/mcs.c	/^void mcs_acquire(mcs_lock *L, mcs_qnode_ptr I) $/;"	f
mcs_global_params	include/mcs.h	/^typedef struct mcs_global_params {$/;"	s
mcs_global_params	include/mcs.h	/^} mcs_global_params;$/;"	t	typeref:struct:mcs_global_params
mcs_local_params	include/mcs.h	/^typedef mcs_qnode* mcs_local_params;$/;"	t
mcs_lock	include/mcs.h	/^typedef mcs_qnode_ptr mcs_lock; \/\/initialized to NULL$/;"	t
mcs_qnode	include/mcs.h	/^typedef struct mcs_qnode {$/;"	s
mcs_qnode	include/mcs.h	/^} mcs_qnode;$/;"	t	typeref:struct:mcs_qnode
mcs_qnode_ptr	include/mcs.h	/^typedef volatile mcs_qnode *mcs_qnode_ptr;$/;"	t
mcs_release	src/mcs.c	/^void mcs_release(mcs_lock *L, mcs_qnode_ptr I) $/;"	f
mcs_trylock	src/mcs.c	/^int mcs_trylock(mcs_lock *L, mcs_qnode_ptr I) {$/;"	f
mutex	bmarks/atomic_bench.c	/^    pthread_mutex_t mutex;$/;"	m	struct:barrier	file:
mutex	bmarks/bank_one.c	/^    pthread_mutex_t mutex;$/;"	m	struct:barrier	file:
mutex	bmarks/bank_simple.c	/^  pthread_mutex_t mutex;$/;"	m	struct:barrier	file:
mutex	bmarks/bank_th.c	/^    pthread_mutex_t mutex;$/;"	m	struct:barrier	file:
mutex	bmarks/htlock_test.c	/^  pthread_mutex_t mutex;$/;"	m	struct:barrier	file:
mutex	bmarks/individual_ops.c	/^    pthread_mutex_t mutex;$/;"	m	struct:barrier	file:
mutex	bmarks/measure_contention.c	/^  pthread_mutex_t mutex;$/;"	m	struct:barrier	file:
mutex	bmarks/stress_latency.c	/^    pthread_mutex_t mutex;$/;"	m	struct:barrier	file:
mutex	bmarks/stress_one.c	/^    pthread_mutex_t mutex;$/;"	m	struct:barrier	file:
mutex	bmarks/stress_test.c	/^    pthread_mutex_t mutex;$/;"	m	struct:barrier	file:
mutex	bmarks/test_array_alloc.c	/^    pthread_mutex_t mutex;$/;"	m	struct:barrier	file:
mutex	bmarks/test_correctness.c	/^    pthread_mutex_t mutex;$/;"	m	struct:barrier	file:
mutex	bmarks/test_trylock.c	/^    pthread_mutex_t mutex;$/;"	m	struct:barrier	file:
mutex	bmarks/uncontended.c	/^    pthread_mutex_t mutex;$/;"	m	struct:barrier	file:
mutex_delay	bmarks/measure_contention.c	/^int mutex_delay;$/;"	v
mutex_delay	bmarks/stress_latency.c	/^int mutex_delay;$/;"	v
mutex_delay	bmarks/stress_one.c	/^int mutex_delay;$/;"	v
mutex_delay	bmarks/stress_test.c	/^int mutex_delay;$/;"	v
my_index	include/alock.h	/^    uint32_t my_index;$/;"	m	struct:lock
my_pred	include/clh.h	/^    clh_qnode* my_pred;$/;"	m	struct:clh_local_params
my_pred	include/hclh.h	/^    qnode* my_pred;$/;"	m	struct:hclh_local_params
my_qnode	include/clh.h	/^    clh_qnode* my_qnode;$/;"	m	struct:clh_local_params
my_qnode	include/hclh.h	/^    qnode* my_qnode;$/;"	m	struct:hclh_local_params
my_queue	include/hclh.h	/^    local_queue* my_queue;$/;"	m	struct:hclh_local_params
my_random	include/utils.h	256;"	d
nb_balance	bmarks/bank_simple.c	/^      unsigned long nb_balance;$/;"	m	struct:thread_data::__anon14::__anon15	file:
nb_deposit	bmarks/bank_simple.c	/^      unsigned long nb_deposit;$/;"	m	struct:thread_data::__anon14::__anon15	file:
nb_read_all	bmarks/bank_one.c	/^      unsigned long nb_read_all;$/;"	m	struct:thread_data::__anon12::__anon13	file:
nb_read_all	bmarks/bank_th.c	/^      unsigned long nb_read_all;$/;"	m	struct:thread_data::__anon16::__anon17	file:
nb_threads	bmarks/bank_one.c	/^      int nb_threads;$/;"	m	struct:thread_data::__anon12::__anon13	file:
nb_threads	bmarks/bank_simple.c	/^      int nb_threads;$/;"	m	struct:thread_data::__anon14::__anon15	file:
nb_threads	bmarks/bank_th.c	/^      int nb_threads;$/;"	m	struct:thread_data::__anon16::__anon17	file:
nb_transfer	bmarks/bank_one.c	/^      unsigned long nb_transfer;$/;"	m	struct:thread_data::__anon12::__anon13	file:
nb_transfer	bmarks/bank_th.c	/^      unsigned long nb_transfer;$/;"	m	struct:thread_data::__anon16::__anon17	file:
nb_withdraw	bmarks/bank_simple.c	/^      unsigned long nb_withdraw;$/;"	m	struct:thread_data::__anon14::__anon15	file:
nb_write_all	bmarks/bank_one.c	/^      unsigned long nb_write_all;$/;"	m	struct:thread_data::__anon12::__anon13	file:
nb_write_all	bmarks/bank_th.c	/^      unsigned long nb_write_all;$/;"	m	struct:thread_data::__anon16::__anon17	file:
next	include/mcs.h	/^    volatile struct mcs_qnode *volatile next;$/;"	m	struct:mcs_qnode
node_fields	include/hclh.h	/^typedef struct node_fields {$/;"	s
node_fields	include/hclh.h	/^} node_fields;$/;"	t	typeref:struct:node_fields
nop_rep	include/utils.h	/^        nop_rep(uint32_t num_reps)$/;"	f
num_acquires	bmarks/individual_ops.c	/^    unsigned long num_acquires;$/;"	m	struct:thread_data	file:
num_acquires	bmarks/measure_contention.c	/^      unsigned long num_acquires;$/;"	m	struct:thread_data::__anon25::__anon26	file:
num_acquires	bmarks/stress_latency.c	/^      unsigned long num_acquires;$/;"	m	struct:thread_data::__anon8::__anon9	file:
num_acquires	bmarks/stress_one.c	/^            unsigned long num_acquires;$/;"	m	struct:thread_data::__anon18::__anon19	file:
num_acquires	bmarks/stress_test.c	/^            unsigned long num_acquires;$/;"	m	struct:thread_data::__anon20::__anon21	file:
num_acquires	bmarks/test_array_alloc.c	/^            unsigned long num_acquires;$/;"	m	struct:thread_data::__anon23::__anon24	file:
num_acquires	bmarks/test_correctness.c	/^            unsigned long num_acquires;$/;"	m	struct:thread_data::__anon27::__anon28	file:
num_acquires	bmarks/test_trylock.c	/^            unsigned long num_acquires;$/;"	m	struct:thread_data::__anon6::__anon7	file:
num_acquires	bmarks/uncontended.c	/^    unsigned long num_acquires;$/;"	m	struct:thread_data	file:
num_cores_try_lock	bmarks/htlock_test.c	/^int num_cores_try_lock;$/;"	v
num_entries	bmarks/atomic_bench.c	/^int num_entries;$/;"	v
num_entries	bmarks/htlock_test.c	/^int num_entries;$/;"	v
num_locks	bmarks/individual_ops.c	/^int num_locks;$/;"	v
num_locks	bmarks/measure_contention.c	/^int num_locks;$/;"	v
num_locks	bmarks/stress_latency.c	/^int num_locks;$/;"	v
num_locks	bmarks/stress_one.c	/^int num_locks;$/;"	v
num_locks	bmarks/stress_test.c	/^int num_locks;$/;"	v
num_locks	bmarks/test_array_alloc.c	/^int num_locks;$/;"	v
num_locks	bmarks/uncontended.c	/^int num_locks;$/;"	v
num_measured	bmarks/atomic_bench.c	/^    unsigned long num_measured;$/;"	m	struct:thread_data	file:
num_operations	bmarks/atomic_bench.c	/^    unsigned long num_operations;$/;"	m	struct:thread_data	file:
num_operations	bmarks/htlock_test.c	/^      unsigned long num_operations;$/;"	m	struct:thread_data::__anon10::__anon11	file:
num_threads	bmarks/atomic_bench.c	/^int num_threads;$/;"	v
num_threads	bmarks/htlock_test.c	/^int num_threads;$/;"	v
num_threads	bmarks/individual_ops.c	/^int num_threads;$/;"	v
num_threads	bmarks/measure_contention.c	/^int num_threads;$/;"	v
num_threads	bmarks/stress_latency.c	/^int num_threads;$/;"	v
num_threads	bmarks/stress_one.c	/^int num_threads;$/;"	v
num_threads	bmarks/stress_test.c	/^int num_threads;$/;"	v
num_threads	bmarks/test_array_alloc.c	/^int num_threads;$/;"	v
num_threads	bmarks/test_correctness.c	/^int num_threads;$/;"	v
num_threads	bmarks/test_trylock.c	/^int num_threads;$/;"	v
num_threads	bmarks/uncontended.c	/^int num_threads;$/;"	v
number	bmarks/bank_one.c	/^    int32_t number;$/;"	m	struct:account	file:
number	bmarks/bank_simple.c	/^  uint32_t number;$/;"	m	struct:account	file:
number	bmarks/bank_th.c	/^    int32_t number;$/;"	m	struct:account	file:
nxt	include/htlock.h	/^    volatile int32_t nxt;$/;"	m	struct:htlock_local
nxt	include/htlock.h	/^    volatile uint32_t nxt;$/;"	m	struct:htlock_global
op_pause	bmarks/atomic_bench.c	/^int op_pause;$/;"	v
padding	bmarks/atomic_bench.c	/^    char padding[CACHE_LINE_SIZE];$/;"	m	struct:thread_data	file:
padding	bmarks/atomic_bench.c	/^    volatile char padding[CACHE_LINE_SIZE];$/;"	m	union:__anon22	file:
padding	bmarks/bank_one.c	/^    uint8_t padding[2 * CACHE_LINE_SIZE];$/;"	m	union:thread_data::__anon12	file:
padding	bmarks/bank_one.c	/^    uint8_t padding[CACHE_LINE_SIZE-8];$/;"	m	struct:account	file:
padding	bmarks/bank_simple.c	/^    uint8_t padding[2 * CACHE_LINE_SIZE];$/;"	m	union:thread_data::__anon14	file:
padding	bmarks/bank_th.c	/^    uint8_t padding[2 * CACHE_LINE_SIZE];$/;"	m	union:thread_data::__anon16	file:
padding	bmarks/bank_th.c	/^    uint8_t padding[CACHE_LINE_SIZE-8];$/;"	m	struct:account	file:
padding	bmarks/htlock_test.c	/^    char padding[CACHE_LINE_SIZE];$/;"	m	union:thread_data::__anon10	file:
padding	bmarks/individual_ops.c	/^    char padding[CACHE_LINE_SIZE];$/;"	m	struct:thread_data	file:
padding	bmarks/measure_contention.c	/^    char padding[CACHE_LINE_SIZE];$/;"	m	union:thread_data::__anon25	file:
padding	bmarks/stress_latency.c	/^    char padding[CACHE_LINE_SIZE];$/;"	m	union:thread_data::__anon8	file:
padding	bmarks/stress_one.c	/^        char padding[CACHE_LINE_SIZE];$/;"	m	union:thread_data::__anon18	file:
padding	bmarks/stress_test.c	/^        char padding[CACHE_LINE_SIZE];$/;"	m	union:thread_data::__anon20	file:
padding	bmarks/test_array_alloc.c	/^        char padding[CACHE_LINE_SIZE];$/;"	m	union:thread_data::__anon23	file:
padding	bmarks/test_array_alloc.c	/^    char padding[56];$/;"	m	struct:shared_data	file:
padding	bmarks/test_correctness.c	/^        char padding[CACHE_LINE_SIZE];$/;"	m	union:thread_data::__anon27	file:
padding	bmarks/test_correctness.c	/^    char padding[56];$/;"	m	struct:shared_data	file:
padding	bmarks/test_trylock.c	/^        char padding[CACHE_LINE_SIZE];$/;"	m	union:thread_data::__anon6	file:
padding	bmarks/test_trylock.c	/^    char padding[56];$/;"	m	struct:shared_data	file:
padding	bmarks/uncontended.c	/^    char padding[CACHE_LINE_SIZE];$/;"	m	struct:thread_data	file:
padding	include/alock.h	/^    uint8_t padding[CACHE_LINE_SIZE-2];$/;"	m	struct:flag_line
padding	include/clh.h	/^    uint8_t padding[CACHE_LINE_SIZE - 1];$/;"	m	struct:clh_qnode
padding	include/clh.h	/^    uint8_t padding[CACHE_LINE_SIZE - 8];$/;"	m	struct:clh_global_params
padding	include/gl_lock.h	/^        volatile unsigned char padding[CACHE_LINE_SIZE];$/;"	m	union:global_lock::__anon3
padding	include/hclh.h	/^        volatile uint8_t padding[CACHE_LINE_SIZE];$/;"	m	union:qnode::__anon2
padding	include/hclh.h	/^    volatile uint8_t padding[CACHE_LINE_SIZE-20];$/;"	m	struct:hclh_global_params
padding	include/htlock.h	/^    uint8_t padding[CACHE_LINE_SIZE - 8];$/;"	m	struct:htlock_global
padding	include/htlock.h	/^    uint8_t padding[CACHE_LINE_SIZE - 8];$/;"	m	struct:htlock_local
padding	include/mcs.h	/^    uint8_t padding[CACHE_LINE_SIZE - 16];$/;"	m	struct:mcs_qnode
padding	include/mcs.h	/^    uint8_t padding[CACHE_LINE_SIZE - 8];$/;"	m	struct:mcs_global_params
padding	include/rw_ttas.h	/^        uint8_t padding[CACHE_LINE_SIZE];$/;"	m	union:rw_ttas::__anon5
padding	include/spinlock.h	/^        uint8_t padding;$/;"	m	union:spinlock_lock_t::__anon1
padding	include/spinlock.h	/^        uint8_t padding[CACHE_LINE_SIZE];$/;"	m	union:spinlock_lock_t::__anon1
padding	include/ttas.h	/^        uint8_t padding;$/;"	m	union:ttas_lock_t::__anon4
padding	include/ttas.h	/^        uint8_t padding[CACHE_LINE_SIZE];$/;"	m	union:ttas_lock_t::__anon4
padding0	include/ticket.h	/^    uint8_t padding0[CACHE_LINE_SIZE - 4];$/;"	m	struct:ticketlock_t
padding1	include/ticket.h	/^    uint8_t padding1[CACHE_LINE_SIZE - 8];$/;"	m	struct:ticketlock_t
padding2	include/ticket.h	/^    uint8_t padding2[4];$/;"	m	struct:ticketlock_t
pause_rep	include/utils.h	/^        pause_rep(uint32_t num_reps)$/;"	f
phys_id	bmarks/atomic_bench.c	/^__thread uint32_t phys_id;$/;"	v
phys_id	bmarks/bank_one.c	/^__thread uint32_t phys_id;$/;"	v
phys_id	bmarks/bank_simple.c	/^__thread uint32_t phys_id;$/;"	v
phys_id	bmarks/bank_th.c	/^__thread uint32_t phys_id;$/;"	v
phys_id	bmarks/htlock_test.c	/^__thread uint32_t phys_id;$/;"	v
phys_id	bmarks/individual_ops.c	/^__thread uint32_t phys_id;$/;"	v
phys_id	bmarks/measure_contention.c	/^__thread uint32_t phys_id;$/;"	v
phys_id	bmarks/stress_latency.c	/^__thread uint32_t phys_id;$/;"	v
phys_id	bmarks/stress_one.c	/^__thread uint32_t phys_id;$/;"	v
phys_id	bmarks/stress_test.c	/^__thread uint32_t phys_id;$/;"	v
phys_id	bmarks/test_array_alloc.c	/^__thread uint32_t phys_id;$/;"	v
phys_id	bmarks/test_correctness.c	/^__thread uint32_t phys_id;$/;"	v
phys_id	bmarks/test_trylock.c	/^__thread uint32_t phys_id;$/;"	v
phys_id	bmarks/uncontended.c	/^__thread uint32_t phys_id;$/;"	v
pow2roundup	include/utils.h	/^    static inline uint32_t pow2roundup (uint32_t x){$/;"	f
protected_data	bmarks/measure_contention.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile shared_data* protected_data;$/;"	v
protected_data	bmarks/stress_latency.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile shared_data* protected_data;$/;"	v
protected_data	bmarks/stress_one.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile shared_data* protected_data;$/;"	v
protected_data	bmarks/stress_test.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile shared_data* protected_data;$/;"	v
protected_data	bmarks/test_array_alloc.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile shared_data* protected_data;$/;"	v
protected_data	bmarks/test_correctness.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile shared_data* protected_data;$/;"	v
protected_data	bmarks/test_trylock.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile shared_data* protected_data;$/;"	v
protected_offsets	bmarks/measure_contention.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile uint32_t* protected_offsets;$/;"	v
protected_offsets	bmarks/stress_latency.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile uint32_t* protected_offsets;$/;"	v
protected_offsets	bmarks/stress_one.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile uint32_t* protected_offsets;$/;"	v
protected_offsets	bmarks/stress_test.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile uint32_t* protected_offsets;$/;"	v
qnode	include/hclh.h	/^typedef struct qnode {$/;"	s
qnode	include/hclh.h	/^} qnode;$/;"	t	typeref:struct:qnode
qnode_ptr	include/hclh.h	/^typedef volatile qnode *qnode_ptr;$/;"	t
rand_range	include/utils.h	/^    static inline long rand_range(long r) {$/;"	f
read_accounts	bmarks/bank_one.c	/^int read_accounts(volatile account_t *a1, volatile account_t *a2,  int thread_id)$/;"	f
read_accounts	bmarks/bank_th.c	/^int read_accounts(volatile account_t *a1, volatile account_t *a2,  int thread_id)$/;"	f
read_acquire	src/rw_ttas.c	/^void read_acquire(rw_ttas* lock, uint32_t* limit) {$/;"	f
read_all	bmarks/bank_one.c	/^      int read_all;$/;"	m	struct:thread_data::__anon12::__anon13	file:
read_all	bmarks/bank_th.c	/^      int read_all;$/;"	m	struct:thread_data::__anon16::__anon17	file:
read_lock	include/rw_ttas.h	/^    volatile rw_data_t read_lock;$/;"	m	struct:rw_ttas_data
read_release	src/rw_ttas.c	/^void read_release(rw_ttas* lock) {$/;"	f
read_threads	bmarks/bank_one.c	/^      int read_threads;$/;"	m	struct:thread_data::__anon12::__anon13	file:
read_threads	bmarks/bank_th.c	/^      int read_threads;$/;"	m	struct:thread_data::__anon16::__anon17	file:
release_lock	include/lock_if.h	/^static inline void release_lock(lock_local_data *local_d, lock_global_data *global_d) {$/;"	f
release_read	include/lock_if.h	/^static inline void release_read(lock_local_data *local_d, lock_global_data *global_d) {$/;"	f
release_time	bmarks/individual_ops.c	/^    ticks release_time;$/;"	m	struct:thread_data	file:
release_time	bmarks/uncontended.c	/^    ticks release_time;$/;"	m	struct:thread_data	file:
release_trylock	include/lock_if.h	/^static inline void release_trylock(lock_local_data* local_d, lock_global_data* global_d) {$/;"	f
release_write	include/lock_if.h	/^static inline void release_write(lock_local_data *local_d, lock_global_data *global_d) {$/;"	f
remote_core	bmarks/uncontended.c	/^int remote_core;$/;"	v
reset	bmarks/bank_one.c	/^void reset(bank_t *bank)$/;"	f
reset	bmarks/bank_th.c	/^void reset(bank_t *bank)$/;"	f
rls_time	bmarks/stress_latency.c	/^      ticks rls_time;$/;"	m	struct:thread_data::__anon8::__anon9	file:
rw	include/rw_ttas.h	/^        rw_ttas_data rw;$/;"	m	union:rw_ttas::__anon5
rw_data_t	include/rw_ttas.h	/^typedef uint32_t rw_data_t;$/;"	t
rw_data_t	include/rw_ttas.h	/^typedef uint8_t rw_data_t;$/;"	t
rw_seeds	src/rw_ttas.c	/^__thread unsigned long * rw_seeds;$/;"	v
rw_trylock	src/rw_ttas.c	/^int rw_trylock(rw_ttas* lock, uint32_t* limit) {$/;"	f
rw_ttas	include/rw_ttas.h	/^typedef struct rw_ttas {$/;"	s
rw_ttas	include/rw_ttas.h	/^} rw_ttas;$/;"	t	typeref:struct:rw_ttas
rw_ttas_data	include/rw_ttas.h	/^typedef struct rw_ttas_data {$/;"	s
rw_ttas_data	include/rw_ttas.h	/^} rw_ttas_data;$/;"	t	typeref:struct:rw_ttas_data
seed	bmarks/bank_one.c	/^      unsigned int seed;$/;"	m	struct:thread_data::__anon12::__anon13	file:
seed	bmarks/bank_simple.c	/^      unsigned int seed;$/;"	m	struct:thread_data::__anon14::__anon15	file:
seed	bmarks/bank_th.c	/^      unsigned int seed;$/;"	m	struct:thread_data::__anon16::__anon17	file:
seed	bmarks/htlock_test.c	/^      unsigned int seed;$/;"	m	struct:thread_data::__anon10::__anon11	file:
seed	bmarks/measure_contention.c	/^      unsigned int seed;$/;"	m	struct:thread_data::__anon25::__anon26	file:
seed	bmarks/measure_contention.c	/^int seed;$/;"	v
seed_rand	include/utils.h	/^    static inline unsigned long* seed_rand() {$/;"	f
seeds	bmarks/atomic_bench.c	/^__thread unsigned long * seeds;$/;"	v
seeds	bmarks/bank_one.c	/^__thread unsigned long * seeds;$/;"	v
seeds	bmarks/bank_simple.c	/^__thread unsigned long* seeds;$/;"	v
seeds	bmarks/bank_th.c	/^__thread unsigned long * seeds;$/;"	v
seeds	bmarks/measure_contention.c	/^__thread unsigned long* seeds;$/;"	v
seeds	bmarks/stress_latency.c	/^__thread unsigned long * seeds;$/;"	v
seeds	bmarks/stress_test.c	/^__thread unsigned long* seeds;$/;"	v
seeds	bmarks/test_array_alloc.c	/^__thread unsigned long* seeds;$/;"	v
seeds	bmarks/test_correctness.c	/^__thread unsigned long* seeds;$/;"	v
seeds	bmarks/test_trylock.c	/^__thread unsigned long* seeds;$/;"	v
set_cpu	include/utils.h	/^    static inline void set_cpu(int cpu) {$/;"	f
shared_data	bmarks/individual_ops.c	/^typedef struct shared_data{$/;"	s	file:
shared_data	bmarks/individual_ops.c	/^} shared_data;$/;"	t	typeref:struct:shared_data	file:
shared_data	bmarks/measure_contention.c	/^typedef struct shared_data$/;"	s	file:
shared_data	bmarks/measure_contention.c	/^} shared_data;$/;"	t	typeref:struct:shared_data	file:
shared_data	bmarks/stress_latency.c	/^typedef struct shared_data{$/;"	s	file:
shared_data	bmarks/stress_latency.c	/^} shared_data;$/;"	t	typeref:struct:shared_data	file:
shared_data	bmarks/stress_one.c	/^typedef struct shared_data{$/;"	s	file:
shared_data	bmarks/stress_one.c	/^} shared_data;$/;"	t	typeref:struct:shared_data	file:
shared_data	bmarks/stress_test.c	/^typedef struct shared_data{$/;"	s	file:
shared_data	bmarks/stress_test.c	/^} shared_data;$/;"	t	typeref:struct:shared_data	file:
shared_data	bmarks/test_array_alloc.c	/^typedef struct shared_data{$/;"	s	file:
shared_data	bmarks/test_array_alloc.c	/^} shared_data;$/;"	t	typeref:struct:shared_data	file:
shared_data	bmarks/test_correctness.c	/^typedef struct shared_data{$/;"	s	file:
shared_data	bmarks/test_correctness.c	/^} shared_data;$/;"	t	typeref:struct:shared_data	file:
shared_data	bmarks/test_trylock.c	/^typedef struct shared_data{$/;"	s	file:
shared_data	bmarks/test_trylock.c	/^} shared_data;$/;"	t	typeref:struct:shared_data	file:
shared_data	bmarks/uncontended.c	/^typedef struct shared_data{$/;"	s	file:
shared_data	bmarks/uncontended.c	/^} shared_data;$/;"	t	typeref:struct:shared_data	file:
shared_data	include/alock.h	/^    lock_shared_t* shared_data;$/;"	m	struct:lock
shared_queue	include/hclh.h	/^    global_queue* shared_queue;$/;"	m	struct:hclh_global_params
size	bmarks/bank_one.c	/^    int size;$/;"	m	struct:bank	file:
size	bmarks/bank_simple.c	/^  uint32_t size;$/;"	m	struct:bank	file:
size	bmarks/bank_th.c	/^    int size;$/;"	m	struct:bank	file:
size	include/alock.h	/^    uint32_t size;$/;"	m	struct:lock_shared
some_data	bmarks/individual_ops.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile shared_data * some_data;$/;"	v
some_data	bmarks/uncontended.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile shared_data * some_data;$/;"	v
spinlock_index_t	include/spinlock.h	/^typedef volatile uint32_t spinlock_index_t;$/;"	t
spinlock_lock	src/spinlock.c	/^spinlock_lock(spinlock_lock_t* the_lock, uint32_t* limits) $/;"	f
spinlock_lock_data_t	include/spinlock.h	/^typedef uint32_t spinlock_lock_data_t;$/;"	t
spinlock_lock_data_t	include/spinlock.h	/^typedef uint8_t spinlock_lock_data_t;$/;"	t
spinlock_lock_t	include/spinlock.h	/^typedef struct spinlock_lock_t $/;"	s
spinlock_lock_t	include/spinlock.h	/^} spinlock_lock_t;$/;"	t	typeref:struct:spinlock_lock_t
spinlock_seeds	src/spinlock.c	/^__thread unsigned long* spinlock_seeds;$/;"	v
spinlock_trylock	src/spinlock.c	/^int spinlock_trylock(spinlock_lock_t* the_lock, uint32_t* limits) {$/;"	f
spinlock_unlock	src/spinlock.c	/^spinlock_unlock(spinlock_lock_t *the_lock) $/;"	f
steps	bmarks/htlock_test.c	/^uint32_t steps = 0;$/;"	v
stop	bmarks/atomic_bench.c	/^static volatile int stop;$/;"	v	file:
stop	bmarks/bank_one.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile int64_t * stop;$/;"	v
stop	bmarks/bank_simple.c	/^static volatile int stop;$/;"	v	file:
stop	bmarks/bank_th.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile int64_t * stop;$/;"	v
stop	bmarks/htlock_test.c	/^static volatile int stop;$/;"	v	file:
stop	bmarks/individual_ops.c	/^static volatile int stop;$/;"	v	file:
stop	bmarks/measure_contention.c	/^static volatile int stop;$/;"	v	file:
stop	bmarks/stress_latency.c	/^static volatile int stop;$/;"	v	file:
stop	bmarks/stress_one.c	/^static volatile int stop;$/;"	v	file:
stop	bmarks/stress_test.c	/^static volatile int stop;$/;"	v	file:
stop	bmarks/test_array_alloc.c	/^static volatile int stop;$/;"	v	file:
stop	bmarks/test_correctness.c	/^static volatile int stop;$/;"	v	file:
stop	bmarks/test_trylock.c	/^static volatile int stop;$/;"	v	file:
stop	bmarks/uncontended.c	/^static volatile int stop;$/;"	v	file:
sub_abs	src/htlock.c	/^sub_abs(const uint32_t a, const uint32_t b)$/;"	f	file:
sub_abs	src/ticket.c	/^sub_abs(const uint32_t a, const uint32_t b)$/;"	f	file:
successor_must_wait	include/hclh.h	/^    volatile uint8_t successor_must_wait;$/;"	m	struct:node_fields
swap_pointer	include/atomic_ops.h	/^static inline void* swap_pointer(volatile void* ptr, void *x) {$/;"	f
swap_uint16	include/atomic_ops.h	/^static inline uint16_t swap_uint16(volatile uint16_t* ptr,  uint16_t x) {$/;"	f
swap_uint16	include/atomic_ops.h	/^static inline uint16_t swap_uint16(volatile uint16_t* target,  uint16_t x) {$/;"	f
swap_uint32	include/atomic_ops.h	/^static inline uint32_t swap_uint32(volatile uint32_t* ptr,  uint32_t x) {$/;"	f
swap_uint32	include/atomic_ops.h	/^static inline uint32_t swap_uint32(volatile uint32_t* target,  uint32_t x) {$/;"	f
swap_uint64	include/atomic_ops.h	/^static inline uint64_t swap_uint64(volatile uint64_t* ptr,  uint64_t x) {$/;"	f
swap_uint64	include/atomic_ops.h	/^static inline uint64_t swap_uint64(volatile uint64_t* target,  uint64_t x) {$/;"	f
swap_uint8	dump/test_atomics.c	/^static inline uint8_t swap_uint8(volatile uint8_t* ptr,  uint8_t x) {$/;"	f	file:
swap_uint8	include/atomic_ops.h	/^static inline uint8_t swap_uint8(volatile uint8_t* ptr,  uint8_t x) {$/;"	f
swap_uint8	include/atomic_ops.h	/^static inline uint8_t swap_uint8(volatile uint8_t* target,  uint8_t x) {$/;"	f
tail	bmarks/individual_ops.c	/^volatile uint32_t tail;$/;"	v
tail	bmarks/uncontended.c	/^volatile uint32_t tail;$/;"	v
tail	include/alock.h	/^    volatile uint32_t tail;$/;"	m	struct:lock_shared
tail	include/ticket.h	/^    volatile uint16_t tail;$/;"	m	struct:ticketlock_t
tail_when_spliced	include/hclh.h	/^    volatile uint8_t tail_when_spliced;$/;"	m	struct:node_fields
tas_uint8	dump/test_atomics.c	/^static inline uint8_t tas_uint8(volatile uint8_t *ptr) {$/;"	f	file:
tas_uint8	include/atomic_ops.h	/^static inline uint8_t tas_uint8(volatile uint8_t *addr) {$/;"	f
tas_uint8	include/atomic_ops.h	/^static inline uint8_t tas_uint8(volatile uint8_t *ptr) {$/;"	f
test	bmarks/bank_one.c	/^void *test(void *data)$/;"	f
test	bmarks/bank_simple.c	/^void *test(void *data)$/;"	f
test	bmarks/bank_th.c	/^void *test(void *data)$/;"	f
test	bmarks/htlock_test.c	/^test(void *data)$/;"	f
test	bmarks/individual_ops.c	/^void *test(void *data)$/;"	f
test	bmarks/measure_contention.c	/^test(void *data)$/;"	f
test	bmarks/stress_latency.c	/^void *test(void *data)$/;"	f
test	bmarks/stress_one.c	/^void *test(void *data)$/;"	f
test	bmarks/stress_test.c	/^void *test(void *data)$/;"	f
test	bmarks/uncontended.c	/^void *test(void *data)$/;"	f
test_correctness	bmarks/test_array_alloc.c	/^void *test_correctness(void *data)$/;"	f
test_correctness	bmarks/test_correctness.c	/^void *test_correctness(void *data)$/;"	f
test_correctness	bmarks/test_trylock.c	/^void *test_correctness(void *data)$/;"	f
test_latency	bmarks/atomic_bench.c	/^void *test_latency(void *data)$/;"	f
test_success	bmarks/atomic_bench.c	/^void *test_success(void *data)$/;"	f
test_throughput	bmarks/atomic_bench.c	/^void *test_throughput(void *data)$/;"	f
the_core	bmarks/uncontended.c	/^    int the_core;$/;"	m	struct:thread_data	file:
the_cores	include/platform_defs.h	/^    static uint8_t   __attribute__ ((unused)) the_cores[] = {$/;"	v
the_cores	include/platform_defs.h	/^    static uint8_t  __attribute__ ((unused)) the_cores[] = {$/;"	v
the_cores	include/platform_defs.h	/^  static uint8_t  __attribute__ ((unused)) the_cores[] = {$/;"	v
the_data	bmarks/atomic_bench.c	/^__attribute__((aligned(CACHE_LINE_SIZE))) volatile data_t * the_data;$/;"	v
the_data	bmarks/individual_ops.c	/^    char the_data[64];$/;"	m	struct:shared_data	file:
the_data	bmarks/measure_contention.c	/^  volatile char the_data[64];$/;"	m	struct:shared_data	file:
the_data	bmarks/stress_latency.c	/^    volatile char the_data[64];$/;"	m	struct:shared_data	file:
the_data	bmarks/stress_one.c	/^    volatile char the_data[64];$/;"	m	struct:shared_data	file:
the_data	bmarks/stress_test.c	/^    volatile char the_data[64];$/;"	m	struct:shared_data	file:
the_data	bmarks/uncontended.c	/^    char the_data[64];$/;"	m	struct:shared_data	file:
the_lock	bmarks/bank_one.c	/^lock_global_data the_lock;$/;"	v
the_lock	bmarks/stress_one.c	/^lock_global_data the_lock;$/;"	v
the_lock	bmarks/test_correctness.c	/^lock_global_data the_lock;$/;"	v
the_lock	bmarks/test_trylock.c	/^lock_global_data the_lock;$/;"	v
the_lock	include/clh.h	/^    clh_lock* the_lock;$/;"	m	struct:clh_global_params
the_lock	include/mcs.h	/^    mcs_lock* the_lock;$/;"	m	struct:mcs_global_params
the_lock	samples/sample_generic.c	/^lock_global_data the_lock;$/;"	v
the_lock	samples/sample_mcs.c	/^mcs_global_params the_lock;$/;"	v
the_locks	bmarks/bank_simple.c	/^volatile global_data the_locks;$/;"	v
the_locks	bmarks/bank_th.c	/^volatile global_data the_locks;$/;"	v
the_locks	bmarks/individual_ops.c	/^volatile global_data the_locks;$/;"	v
the_locks	bmarks/measure_contention.c	/^volatile global_data the_locks;$/;"	v
the_locks	bmarks/stress_latency.c	/^volatile global_data the_locks;$/;"	v
the_locks	bmarks/stress_test.c	/^volatile global_data the_locks;$/;"	v
the_locks	bmarks/test_array_alloc.c	/^global_data the_locks;$/;"	v
the_locks	bmarks/uncontended.c	/^volatile global_data the_locks;$/;"	v
the_sockets	include/platform_defs.h	/^    static uint8_t the_sockets[] = $/;"	v
the_sockets	include/platform_defs.h	/^    static uint8_t the_sockets[] = {$/;"	v
thread_data	bmarks/atomic_bench.c	/^typedef struct thread_data {$/;"	s	file:
thread_data	bmarks/bank_one.c	/^typedef struct thread_data {$/;"	s	file:
thread_data	bmarks/bank_simple.c	/^typedef struct thread_data $/;"	s	file:
thread_data	bmarks/bank_th.c	/^typedef struct thread_data {$/;"	s	file:
thread_data	bmarks/htlock_test.c	/^typedef struct thread_data $/;"	s	file:
thread_data	bmarks/individual_ops.c	/^typedef struct thread_data {$/;"	s	file:
thread_data	bmarks/measure_contention.c	/^typedef struct thread_data $/;"	s	file:
thread_data	bmarks/stress_latency.c	/^typedef struct thread_data {$/;"	s	file:
thread_data	bmarks/stress_one.c	/^typedef struct thread_data {$/;"	s	file:
thread_data	bmarks/stress_test.c	/^typedef struct thread_data {$/;"	s	file:
thread_data	bmarks/test_array_alloc.c	/^typedef struct thread_data {$/;"	s	file:
thread_data	bmarks/test_correctness.c	/^typedef struct thread_data {$/;"	s	file:
thread_data	bmarks/test_trylock.c	/^typedef struct thread_data {$/;"	s	file:
thread_data	bmarks/uncontended.c	/^typedef struct thread_data {$/;"	s	file:
thread_data_t	bmarks/atomic_bench.c	/^} thread_data_t;$/;"	t	typeref:struct:thread_data	file:
thread_data_t	bmarks/bank_one.c	/^} thread_data_t;$/;"	t	typeref:struct:thread_data	file:
thread_data_t	bmarks/bank_simple.c	/^} thread_data_t;$/;"	t	typeref:struct:thread_data	file:
thread_data_t	bmarks/bank_th.c	/^} thread_data_t;$/;"	t	typeref:struct:thread_data	file:
thread_data_t	bmarks/htlock_test.c	/^} thread_data_t;$/;"	t	typeref:struct:thread_data	file:
thread_data_t	bmarks/individual_ops.c	/^} thread_data_t;$/;"	t	typeref:struct:thread_data	file:
thread_data_t	bmarks/measure_contention.c	/^} thread_data_t;$/;"	t	typeref:struct:thread_data	file:
thread_data_t	bmarks/stress_latency.c	/^} thread_data_t;$/;"	t	typeref:struct:thread_data	file:
thread_data_t	bmarks/stress_one.c	/^} thread_data_t;$/;"	t	typeref:struct:thread_data	file:
thread_data_t	bmarks/stress_test.c	/^} thread_data_t;$/;"	t	typeref:struct:thread_data	file:
thread_data_t	bmarks/test_array_alloc.c	/^} thread_data_t;$/;"	t	typeref:struct:thread_data	file:
thread_data_t	bmarks/test_correctness.c	/^} thread_data_t;$/;"	t	typeref:struct:thread_data	file:
thread_data_t	bmarks/test_trylock.c	/^} thread_data_t;$/;"	t	typeref:struct:thread_data	file:
thread_data_t	bmarks/uncontended.c	/^} thread_data_t;$/;"	t	typeref:struct:thread_data	file:
ticket_acquire	src/ticket.c	/^ticket_acquire(ticketlock_t* lock) $/;"	f
ticket_acquires	src/ticket.c	/^__thread uint64_t ticket_acquires = 0;$/;"	v
ticket_avg_queue	src/ticket.c	/^ticket_avg_queue()$/;"	f
ticket_print_contention_stats	src/ticket.c	/^ticket_print_contention_stats()$/;"	f
ticket_queued_total	src/ticket.c	/^__thread uint64_t ticket_queued_total = 0;$/;"	v
ticket_release	src/ticket.c	/^ticket_release(ticketlock_t* lock) $/;"	f
ticket_trylock	src/ticket.c	/^ticket_trylock(ticketlock_t* lock) $/;"	f
ticketlock_t	include/ticket.h	/^typedef struct ticketlock_t $/;"	s
ticketlock_t	include/ticket.h	/^} ticketlock_t;$/;"	t	typeref:struct:ticketlock_t
ticks	include/utils.h	/^    typedef uint64_t ticks;$/;"	t
total	bmarks/bank_one.c	/^int total(bank_t *bank, int transactional)$/;"	f
total	bmarks/bank_th.c	/^int total(bank_t *bank, int transactional)$/;"	f
total_time	bmarks/atomic_bench.c	/^    ticks total_time;$/;"	m	struct:thread_data	file:
total_time	bmarks/stress_latency.c	/^      ticks total_time;$/;"	m	struct:thread_data::__anon8::__anon9	file:
transfer	bmarks/bank_one.c	/^int transfer(volatile account_t *src, volatile account_t *dst, int amount, int thread_id)$/;"	f
transfer	bmarks/bank_th.c	/^int transfer(volatile account_t *src, volatile account_t *dst, int amount, int thread_id)$/;"	f
ttas_index_t	include/ttas.h	/^typedef volatile uint32_t ttas_index_t;$/;"	t
ttas_lock	src/ttas.c	/^void ttas_lock(ttas_lock_t * the_lock, uint32_t* limit) {$/;"	f
ttas_lock_data_t	include/ttas.h	/^typedef uint32_t ttas_lock_data_t;$/;"	t
ttas_lock_data_t	include/ttas.h	/^typedef uint8_t ttas_lock_data_t;$/;"	t
ttas_lock_t	include/ttas.h	/^typedef struct ttas_lock_t {$/;"	s
ttas_lock_t	include/ttas.h	/^}ttas_lock_t;$/;"	t	typeref:struct:ttas_lock_t
ttas_seeds	src/ttas.c	/^__thread unsigned long * ttas_seeds;$/;"	v
ttas_trylock	src/ttas.c	/^int ttas_trylock(ttas_lock_t * the_lock, uint32_t * limits) {$/;"	f
ttas_unlock	src/ttas.c	/^void ttas_unlock(ttas_lock_t *the_lock) $/;"	f
udelay	include/utils.h	/^    static inline void udelay(unsigned int micros)$/;"	f
usage	make_all_versions.sh	/^usage()$/;"	f
usage	scripts/make_all_versions.sh	/^usage()$/;"	f
use_locks	bmarks/bank_one.c	/^int use_locks;$/;"	v
use_locks	bmarks/bank_simple.c	/^int use_locks;$/;"	v
use_locks	bmarks/bank_th.c	/^int use_locks;$/;"	v
wait_cycles	include/htlock.h	/^wait_cycles(uint64_t cycles)$/;"	f
wait_for_grant_or_cluster_master	src/hclh.c	/^uint16_t wait_for_grant_or_cluster_master(volatile qnode *q, uint8_t my_cluster) {$/;"	f
waiting	include/mcs.h	/^    volatile uint8_t waiting;$/;"	m	struct:mcs_qnode
withdraw	bmarks/bank_simple.c	/^withdraw(account_t *src, int amount, int thread_id)$/;"	f
withdraw_perc	bmarks/bank_simple.c	/^      int withdraw_perc;$/;"	m	struct:thread_data::__anon14::__anon15	file:
write_acquire	src/rw_ttas.c	/^void write_acquire(rw_ttas* lock, uint32_t* limit) {$/;"	f
write_all	bmarks/bank_one.c	/^      int write_all;$/;"	m	struct:thread_data::__anon12::__anon13	file:
write_all	bmarks/bank_th.c	/^      int write_all;$/;"	m	struct:thread_data::__anon16::__anon17	file:
write_lock	include/rw_ttas.h	/^    volatile rw_data_t write_lock;$/;"	m	struct:rw_ttas_data
write_release	src/rw_ttas.c	/^void write_release(rw_ttas* lock) {$/;"	f
write_threads	bmarks/bank_one.c	/^      int write_threads;$/;"	m	struct:thread_data::__anon12::__anon13	file:
write_threads	bmarks/bank_th.c	/^      int write_threads;$/;"	m	struct:thread_data::__anon16::__anon17	file:
wtime	include/utils.h	/^    static inline double wtime(void)$/;"	f
xchg32	include/atomic_ops.h	/^static inline unsigned long xchg32(volatile unsigned int *m, unsigned int val)$/;"	f
xchg64	include/atomic_ops.h	/^static inline unsigned long xchg64(volatile unsigned long *m, unsigned long val)                                                                                                             $/;"	f
xorshf96	include/utils.h	/^    static inline unsigned long xorshf96(unsigned long* x, unsigned long* y, unsigned long* z) {          \/\/period 2^96-1$/;"	f
